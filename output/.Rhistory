install.packages("itsmr")
taxi2016count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PickUp2016_Clean.csv")
taxi2015count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PickUp2015_Clean.csv")
library(data.table)
library(tibble)
library(dplyr)
library(bit64)
library(tidyverse)
library(stringr)
library(stringi)
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output")
PU.16=fread("PickUp2016_Clean.csv")
PU.15=fread("PickUp2015_Clean.csv")
View(pu.15)
View(PU.15)
pu15 = as.character(PU.15$groups_byhour)
pu16 = as.character(PU.16$groups_byhour)
# Time
time.express = "[0-9]+:00:00"
pu15.time = unlist(regmatches(pu15, gregexpr(pu15, pattern = time.express)))
pu16.time = unlist(regmatches(pu16, gregexpr(pu16, pattern = time.express)))
pu15.time[1:2]
pu15.hour = stri_extract_first_regex(pu15.time, "[0-9]{1,2}")
pu15.hour[1:@]
pu15.hour[1:2]
pu16.hour = stri_extract_first_regex(pu16.time, "[0-9]{1,2}")
# Extract date only
date.express = "[0-9]{4}-[0-9]{2}-[0-9]{2}"
pu15.year = unlist(regmatches(pu15, gregexpr(pu15, pattern = year.express)))
# Extract date only
date.express = "[0-9]{4}-[0-9]{2}-[0-9]{2}"
pu15.date = unlist(regmatches(pu15, gregexpr(pu15, pattern = date.express)))
pu16.date = unlist(regmatches(pu16, gregexpr(pu16, pattern = date.express)))
pu16.date.time = paste(pu16.date, pu16.hour, sep = " ", collapse = ";")
pu16.date.time = unlist(strsplit(pu16.date.time, split = ";"))
pu16.date.time[1:3]
pu.hour15 = format(strptime(pu15.time, "%I:%M:%S"), format="%H:%M:%S")
pu.hour15 = stri_extract_first_regex(pu.hour15, "[0-9]{2}")
pu.hour15[1:50]
pu15.time
pu.hour15 = format(strptime(pu15.time, "%H:%M:%S"), format="%H:%M:%S")
pu.hour15[1:3]
pu.hour15 = stri_extract_first_regex(pu.hour15, "[0-9]{2}")
pu.hour15[1:50]
pu.hour15[1:500]
pu15.hour = stri_extract_first_regex(pu.hour15, "[0-9]{2}")
pu16.hour = stri_extract_first_regex(pu16.time, "[0-9]{2}")
pu16.hour[1:500]
# Extract date only
date.express = "[0-9]{4}-[0-9]+-[0-9]+"
pu15.date = unlist(regmatches(pu15, gregexpr(pu15, pattern = date.express)))
pu16.date = unlist(regmatches(pu16, gregexpr(pu16, pattern = date.express)))
pu.date15 = as.Date(pu15.date, format = "%m/%d/%y")
pu.date15[1:20]
pu15.date[1:2]
pu.date15 = as.Date(pu15.date, format = "%m-%d-%y")
pu.date15[1:20]
pu.date15 = as.Date(pu15.date, format = "%y-%m-%d")
pu.date15[1:20]
pu.date15 = as.Date(pu15.date, format = "%y/%m/%d")
pu.date15[1:20]
pu.date15 = as.Date(pu15.date)
pu.date15[1:20]
pu.date16 = as.Date(pu16.date)
pu16.date.time = paste(pu.date16, pu16.hour, sep = " ", collapse = ";")
pu16.date.time = unlist(strsplit(pu16.date.time, split = ";"))
pu16.date.time[1:20]
pu15.date.time = paste(pu.date15, pu15.hour, sep = " ", collapse = ";")
pu15.date.time = unlist(strsplit(pu15.date.time, split = ";"))
head(pu15.date.time)
View(PU.15)
View(PU.16)
# Update data
PU.15[,2] =pu15.date.time
PU.16[,3] =pu16.date.time
PU.16 = PU.16[,-2]
write_csv(PU.15, path = "../output/PU15_Update.csv")
write_csv(PU.16, path = "../output/PU16_Update.csv")
####################################################################   Clean Uber
UberSample=fread("../data/taxi trip/test_uber.csv")
View(UberSample)
uber = UberSample[,-c(1,2,4)]
View(uber)
uber.time = unlist(regmatches(uber$groups_byhour,
gregexpr(uber$groups_byhour, pattern = time.express)))
uber.hour = stri_extract_first_regex(uber.time, "[0-9]{2}")
date.express = "[0-9]{4}-[0-9]+-[0-9]+"
uber.date = unlist(regmatches(uber$groups_byhour,
gregexpr(uber$groups_byhour, pattern = date.express)))
uber.date.time = paste(uber.date, uber.hour, sep = " ", collapse = ";")
uber.date.time = unlist(strsplit(uber.date.time, split = ";"))
head(uber.date.time)
uber[,2] = uber.date.time
write_csv(uber, path = "../output/testUber_Update.csv")
taxi2016count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PU16_Update.csv")
taxi2015count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PU15_Update.csv")
View(taxi2016count_byhour_id)
taxicount_byhour_id<-bind_rows(taxi2015count_byhour_id, taxi2016count_byhour_id)
View(taxicount_byhour_id)
uber <- fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/testUber_Update.csv")
ubercount_byhour_id <- fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/testUber_Update.csv")
both_byhour_id<-bind_rows(taxicount_byhour_id,ubercount_byhour_id)
pu.hour16 = format(strptime(pu16.time, "%H:%M:%S"), format="%H:%M:%S")  # let hour be 2 digits
pu16.date.time = paste(pu.date16, pu.hour16, sep = " ", collapse = ";")
pu16.date.time = unlist(strsplit(pu16.date.time, split = ";"))
head(pu16.date.time)
pu15.date.time = paste(pu.date15, pu.hour15, sep = " ", collapse = ";")
pu15.date.time = unlist(strsplit(pu15.date.time, split = ";"))
# Update data
PU.15[,2] =pu15.date.time
PU.16[,3] =pu16.date.time
PU.16=fread("PickUp2016_Clean.csv")
PU.15=fread("PickUp2015_Clean.csv")
# Update data
PU.15[,2] =pu15.date.time
PU.16[,3] =pu16.date.time
PU.16 = PU.16[,-2]
View(PU.16)
View(PU.15)
pu.hour15 = format(strptime(pu15.time, "%H:%M:%S"), format="%H:%M:%S")  # let hour be 2 digits
pu15.date.time = paste(pu.date15, pu.hour15, sep = " ", collapse = ";")
pu15.date.time = unlist(strsplit(pu15.date.time, split = ";"))
# Update data
PU.15[,2] =pu15.date.time
View(PU.15)
write_csv(PU.15, path = "../output/PU15_Update.csv")
write_csv(PU.16, path = "../output/PU16_Update.csv")
uber.hour = format(strptime(uber.time, "%H:%M:%S"), format="%H:%M:%S")  # let hour be 2 digits
uber.date.time = paste(uber.date, uber.hour, sep = " ", collapse = ";")
uber.date.time = unlist(strsplit(uber.date.time, split = ";"))
uber[,2] = uber.date.time
View(uber)
write_csv(uber, path = "../output/testUber_Update.csv")
time = "1"
format(strptime(time, "%H"), format="%H:%M:%S")
shinyServer(function(input, output) {
#observe({
output$map<-renderLeaflet({
date = as.Date(input$date)
time = format(strptime(input$time, "%H"), format="%H:%M:%S")
date_time = paste(date, time, sep = " ")
if (input$car == 'Uber'){
t <- filter(ubercount_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=t$mean_long,lat=t$mean_lat,weight = 5,radius = t$Count_byhour^(1/4)*200,
color = "black",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else if(input$car == 'Taxi'){
t <- filter(taxicount_byhour_id, groups_byhour==date_time)
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=t$mean_long,lat=t$mean_lat,weight = 5,radius = t$Count_byhour^(1/4)*200,
color = "yellow",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else {
t <- filter(both_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=t$mean_long,lat=t$mean_lat,weight = 5,radius = t$Count_byhour^(1/4)*200,
color = "blue",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
})
})
library(rgeos)
library(sp)
library(rgdal)
library(leaflet)
library(htmlwidgets)
library(shiny)
library(ggplot2)
library(dplyr)
library(data.table)
shinyServer(function(input, output) {
#observe({
output$map<-renderLeaflet({
date = as.Date(input$date)
time = format(strptime(input$time, "%H"), format="%H:%M:%S")
date_time = paste(date, time, sep = " ")
if (input$car == 'Uber'){
t <- filter(ubercount_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=t$mean_long,lat=t$mean_lat,weight = 5,radius = t$Count_byhour^(1/4)*200,
color = "black",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else if(input$car == 'Taxi'){
t <- filter(taxicount_byhour_id, groups_byhour==date_time)
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=t$mean_long,lat=t$mean_lat,weight = 5,radius = t$Count_byhour^(1/4)*200,
color = "yellow",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else {
t <- filter(both_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=t$mean_long,lat=t$mean_lat,weight = 5,radius = t$Count_byhour^(1/4)*200,
color = "blue",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
})
})
navbarPage("NYC TRAFFIC", id="nav",
tabPanel("Time Flow Map",
leafletOutput("map", width = "150%", height = 700),
#set panel in the left side
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 0, right = "auto", bottom = "auto",
width = 330, height = "auto",
h2("Taxi and Uber hourly flow change"),
selectInput("car","Car type",c("Taxi","Uber","Both"),selected = "Uber"),
textInput("date", "Choose date", "2015-1-1"),
sliderInput("time", "Hours of Day:",
min = 0, max = 24, value = 0, step = 1,
animate=animationOptions(interval = 500)),
helpText("Click play button to see dynamic flow data")
)
)
)
runApp('~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/lib/XinyiHuapp')
View(PU.15)
runApp('~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/lib/XinyiHuapp')
View(taxicount_byhour_id)
ubercount_byhour_id <- fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/testUber_Update.csv")
taxi2016count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PU16_Update.csv")
taxi2015count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PU15_Update.csv")
taxicount_byhour_id<-bind_rows(taxi2015count_byhour_id, taxi2016count_byhour_id)
View(taxicount_byhour_id)
both_byhour_id<-bind_rows(taxicount_byhour_id,ubercount_byhour_id)
shinyServer(function(input, output) {
#observe({
output$map<-renderLeaflet({
date = as.Date(input$date)
time = format(strptime(input$time, "%H"), format="%H:%M:%S")
date_time = paste(date, time, sep = " ")
if (input$car == 'Uber'){
t <- filter(ubercount_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=t$mean_long,lat=t$mean_lat,weight = 5,radius = t$Count_byhour^(1/4)*200,
color = "black",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else if(input$car == 'Taxi'){
t <- filter(taxicount_byhour_id, groups_byhour==date_time)
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=t$mean_long,lat=t$mean_lat,weight = 5,radius = t$Count_byhour^(1/4)*200,
color = "yellow",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else {
t <- filter(both_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=t$mean_long,lat=t$mean_lat,weight = 5,radius = t$Count_byhour^(1/4)*200,
color = "blue",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
})
})
navbarPage("NYC TRAFFIC", id="nav",
tabPanel("Time Flow Map",
leafletOutput("map", width = "150%", height = 700),
#set panel in the left side
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 0, right = "auto", bottom = "auto",
width = 330, height = "auto",
h2("Taxi and Uber hourly flow change"),
selectInput("car","Car type",c("Taxi","Uber","Both"),selected = "Uber"),
textInput("date", "Choose date", "2015-1-9"),
sliderInput("time", "Hours of Day:",
min = 0, max = 24, value = 0, step = 1,
animate=animationOptions(interval = 500)),
helpText("Click play button to see dynamic flow data")
)
)
)
runApp('~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/lib/XinyiHuapp')
View(ubercount_byhour_id)
date = as.Date("2015-1-1")
time = format(strptime("1","%H"), format="%H:%M:%S")
paste(date, time, sep = " ")
ubercount_byhour_id <- fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/testUber_Update.csv")
taxi2016count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PU16_Update.csv")
taxi2015count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PU15_Update.csv")
taxicount_byhour_id<-bind_rows(taxi2015count_byhour_id, taxi2016count_byhour_id)
both_byhour_id<-bind_rows(taxicount_byhour_id,ubercount_byhour_id)
shinyServer(function(input, output) {
#observe({
output$map<-renderLeaflet({
date = as.Date(input$date)
time = format(strptime(input$time, "%H"), format="%H:%M:%S")
date_time = paste(date, time, sep = " ")
if (input$car == 'Uber'){
t <- filter(ubercount_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "black",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else if(input$car == 'Taxi'){
t <- filter(taxicount_byhour_id, groups_byhour==date_time)
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "yellow",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else {
t <- filter(both_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "blue",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
})
})
navbarPage("NYC TRAFFIC", id="nav",
tabPanel("Time Flow Map",
leafletOutput("map", width = "150%", height = 700),
#set panel in the left side
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 0, right = "auto", bottom = "auto",
width = 330, height = "auto",
h2("Taxi and Uber hourly flow change"),
selectInput("car","Car type",c("Taxi","Uber","Both"),selected = "Uber"),
textInput("date", "Choose date", "2015-1-1"),
sliderInput("time", "Hours of Day:",
min = 0, max = 24, value = 0, step = 1,
animate=animationOptions(interval = 500)),
helpText("Click play button to see dynamic flow data")
)
)
)
runApp('~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/lib/XinyiHuapp')
t <- filter(taxicount_byhour_id, groups_byhour=="2015-01-08 20:00:00")
shinyServer(function(input, output) {
#observe({
output$map<-renderLeaflet({
date = as.Date(input$date)
time = format(strptime(input$time, "%H"), format="%H:%M:%S")
date_time = paste(date, time, sep = " ")
if (input$car == 'Uber'){
t <- filter(ubercount_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "black",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else if(input$car == 'Taxi'){
t <- filter(taxicount_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "yellow",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else {
t <- filter(both_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "blue",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
})
})
runApp('~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/lib/XinyiHuapp')
runApp('~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/lib/XinyiHuapp')
