else if (input$car == '2016'){
t <- filter(taxi2016count_byhour_id, groups_byhour==date.time)
return(t)
}
else{t <- filter(taxicount_byhour_id, groups_byhour==date.time)}
return(t)
})
#draw output by leaflet
output$map<-renderLeaflet({
if (input=="2015"){
map<-leaflet(drawvalue)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,popup=taxi2015count_byhour_id$Count_byhour,
weight = 5,radius = ~Count_byhour^(1/4)*200,color = "black",stroke = TRUE,fillOpacity = 0.5)}
else if (input=="2016"){
map<-leaflet(drawvalue)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,popup = taxi2016count_byhour_id$Count_byhour,
weight = 5,radius = ~Count_byhour^(1/4)*200,color = "yellow",stroke = TRUE,fillOpacity = 1)}
else{}
})
})
navbarPage("NYC TRAFFIC", id="nav",
tabPanel("Time Flow Map",
div(class="outer",
tags$head(
# Include our custom CSS
includeCSS("styles.css"),
includeScript("gomap.js")
),
leafletOutput("map", width="100%", height="100%"),
h2("Taxi and Uber hourly flow change"),
selectInput("car","car type",c("Taxi","Uber","Both"),selected = "Taxi"),
textInput("date", "Choose date", "2015-1-8"),
sliderInput("time", "Hours of Day:",
min = 0, max = 24, value = 0, step = 1,
animate=animationOptions(interval = 500)),
helpText("Click play button to see dynamic flow data")
)
)
)
runApp('~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/TAYLOR'APP')
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/myapp")
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/myapp")
navbarPage("NYC TRAFFIC", id="nav",
tabPanel("Time Flow Map",
div(class="outer",
tags$head(
# Include our custom CSS
includeCSS("styles.css"),
includeScript("gomap.js")
),
leafletOutput("map", width="100%", height="100%"),
h2("Taxi and Uber hourly flow change"),
selectInput("car","car type",c("Taxi","Uber","Both"),selected = "Taxi"),
textInput("date", "Choose date", "2015-1-8"),
sliderInput("time", "Hours of Day:",
min = 0, max = 24, value = 0, step = 1,
animate=animationOptions(interval = 500)),
helpText("Click play button to see dynamic flow data")
)
)
)
library(rgeos)
library(sp)
library(rgdal)
library(leaflet)
library(htmlwidgets)
library(shiny)
library(ggplot2)
library(dplyr)
library(data.table)
#read the uber data
#ubercount_byhour_id<-fread("~/Columbia University/cu_semester2/Applied Data Science/project2/ubercount_byhour_id.csv")
taxi2016count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PickUp2016_Clean.csv")
taxi2015count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PickUp2015_Clean.csv")
taxicount_byhour_id<-bind_rows(taxi2015count_byhour_id, taxi2016count_byhour_id[,-2])
shinyServer(function(input, output, session) {
#get input from ui and select the data we need
#we have three inputs here(car,time,date)
drawvalue <- reactive({
#match time and date to our data
date.time <- paste(input$date, paste(input$time,":00:00", sep = ""), sep = " ")
if (input$car == '2015'){
t <- filter(taxi2015count_byhour_id, groups_byhour==date.time)
return(t)
}
else if (input$car == '2016'){
t <- filter(taxi2016count_byhour_id, groups_byhour==date.time)
return(t)
}
else{t <- filter(taxicount_byhour_id, groups_byhour==date.time)}
return(t)
})
#draw output by leaflet
output$map<-renderLeaflet({
if (input=="2015"){
map<-leaflet(drawvalue)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,popup=taxi2015count_byhour_id$Count_byhour,
weight = 5,radius = ~Count_byhour^(1/4)*200,color = "black",stroke = TRUE,fillOpacity = 0.5)}
else if (input=="2016"){
map<-leaflet(drawvalue)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,popup = taxi2016count_byhour_id$Count_byhour,
weight = 5,radius = ~Count_byhour^(1/4)*200,color = "yellow",stroke = TRUE,fillOpacity = 1)}
else{}
})
})
runApp()
library(shiny)
library(leaflet)
navbarPage("NYC TRAFFIC", id="nav",
tabPanel("Time Flow Map",
leafletOutput("map", width = "150%", height = 700),
#set panel in the left side
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 0, right = "auto", bottom = "auto",
width = 330, height = "auto",
h2("Taxi and Uber hourly flow change"),
selectInput("car","Car type",c("Taxi","Uber","Both"),selected = "Uber"),
textInput("date", "Choose date", "2015-1-8"),
sliderInput("time", "Hours of Day:",
min = 0, max = 24, value = 0, step = 1,
animate=animationOptions(interval = 500)),
helpText("Click play button to see dynamic flow data")
)
)
)
library(rgeos)
library(sp)
library(rgdal)
library(leaflet)
library(htmlwidgets)
library(shiny)
library(ggplot2)
library(dplyr)
library(data.table)
#read the uber data
### Uber
urlfile<-'https://raw.githubusercontent.com/TZstatsADS/Spring2019-Proj2-grp11/master/data/test_uber.csv?token=AsziG_KERfkKFblH2rcJSOWCdxheu7CNks5ceU4VwA%3D%3D'
ubercount_byhour_id<-read.csv(urlfile)[,-c(1,2)]
taxi2016count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PickUp2016_Clean.csv")
taxi2015count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PickUp2015_Clean.csv")
taxicount_byhour_id<-bind_rows(taxi2015count_byhour_id, taxi2016count_byhour_id[,-2])
both_byhour_id<-bind_rows(taxicount_byhour_id,ubercount_byhour_id)
shinyServer(function(input, output) {
#get input from ui and select the data we need
#we have three inputs here(car,time,date)
# Combine date and time
date_time <- reactive({
date.time <- paste(input$date,
paste(input$time, "00:00", sep = ":"),
sep = " ")
return(date.time)
})
#draw output by leaflet
observe({
output$map<-renderLeaflet({
if (input$car == 'Uber'){
t <- filter(ubercount_byhour_id, groups_byhour==as.character(date_time))
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "black",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else if(input$car == 'Taxi'){
t <- filter(taxicount_byhour_id, groups_byhour==as.character(date_time))
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat ,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "yellow",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else {
t <- filter(both_byhour_id, groups_byhour==as.character(date_time))
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat ,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "blue",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
})
})
})
runApp()
shinyServer(function(input, output) {
#get input from ui and select the data we need
#we have three inputs here(car,time,date)
# Combine date and time
#date_time <- reactive({
# date.time <- paste(input$date,
#                   paste(input$time, "00:00", sep = ":"),
#                  sep = " ")
#return(date.time)
#})
#draw output by leaflet
observe({
output$map<-renderLeaflet({
if (input$car == 'Uber'){
t <- filter(ubercount_byhour_id,
groups_byhour==paste(input$date,
paste(input$time, "00:00", sep = ":"),
sep = " "))
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "black",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else if(input$car == 'Taxi'){
t <- filter(taxicount_byhour_id,
groups_byhour==paste(input$date,
paste(input$time, "00:00", sep = ":"),
sep = " "))
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat ,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "yellow",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else {
t <- filter(both_byhour_id,
groups_byhour==paste(input$date,
paste(input$time, "00:00", sep = ":"),
sep = " "))
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat ,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "blue",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
})
})
})
navbarPage("NYC TRAFFIC", id="nav",
tabPanel("Time Flow Map",
leafletOutput("map", width = "150%", height = 700),
#set panel in the left side
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 0, right = "auto", bottom = "auto",
width = 330, height = "auto",
h2("Taxi and Uber hourly flow change"),
selectInput("car","Car type",c("Taxi","Uber","Both"),selected = "Uber"),
textInput("date", "Choose date", "2015-1-8"),
sliderInput("time", "Hours of Day:",
min = 0, max = 24, value = 0, step = 1,
animate=animationOptions(interval = 500)),
helpText("Click play button to see dynamic flow data")
)
)
)
runApp()
View(taxicount_byhour_id)
shinyServer(function(input, output) {
#observe({
output$map<-renderLeaflet({
if (input$car == 'Uber'){
t <- filter(ubercount_byhour_id,
groups_byhour==paste(input$date,
paste(input$time, ":00:00", sep = ""),
sep = " "))
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "black",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else if(input$car == 'Taxi'){
t <- filter(taxicount_byhour_id,
groups_byhour==paste(input$date,
paste(input$time, ":00:00", sep = ""),
sep = " "))
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat ,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "yellow",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else {
t <- filter(both_byhour_id,
groups_byhour==paste(input$date,
paste(input$time, ":00:00", sep = ""),
sep = " "))
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat ,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "blue",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
})
})
navbarPage("NYC TRAFFIC", id="nav",
tabPanel("Time Flow Map",
leafletOutput("map", width = "150%", height = 700),
#set panel in the left side
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 0, right = "auto", bottom = "auto",
width = 330, height = "auto",
h2("Taxi and Uber hourly flow change"),
selectInput("car","Car type",c("Taxi","Uber","Both"),selected = "Uber"),
textInput("date", "Choose date", "2015-1-8"),
sliderInput("time", "Hours of Day:",
min = 0, max = 24, value = 0, step = 1,
animate=animationOptions(interval = 500)),
helpText("Click play button to see dynamic flow data")
)
)
)
runApp()
#read the uber data
### Uber
urlfile<-'https://raw.githubusercontent.com/TZstatsADS/Spring2019-Proj2-grp11/master/data/test_uber.csv?token=AsziG_KERfkKFblH2rcJSOWCdxheu7CNks5ceU4VwA%3D%3D'
ubercount_byhour_id<-read.csv(urlfile)[,-c(1,2)]
taxi2016count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PickUp2016_Clean.csv")
taxi2015count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PickUp2015_Clean.csv")
taxicount_byhour_id<-bind_rows(taxi2015count_byhour_id, taxi2016count_byhour_id[,-2])
View(taxicount_byhour_id)
both_byhour_id<-bind_rows(taxicount_byhour_id,ubercount_byhour_id)
shinyServer(function(input, output) {
#observe({
output$map<-renderLeaflet({
if (input$car == 'Uber'){
t <- filter(ubercount_byhour_id,
groups_byhour==paste(input$date,
paste(input$time, ":00:00", sep = ""),
sep = " "))
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=t$mean_long,lat=t$mean_lat,weight = 5,radius = t$Count_byhour^(1/4)*200,
color = "black",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else if(input$car == 'Taxi'){
t <- filter(taxicount_byhour_id,
groups_byhour==paste(input$date,
paste(input$time, ":00:00", sep = ""),
sep = " "))
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=t$mean_long,lat=t$mean_lat,weight = 5,radius = t$Count_byhour^(1/4)*200,
color = "yellow",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else {
t <- filter(both_byhour_id,
groups_byhour==paste(input$date,
paste(input$time, ":00:00", sep = ""),
sep = " "))
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=t$mean_long,lat=t$mean_lat,weight = 5,radius = t$Count_byhour^(1/4)*200,
color = "blue",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
})
})
navbarPage("NYC TRAFFIC", id="nav",
tabPanel("Time Flow Map",
leafletOutput("map", width = "150%", height = 700),
#set panel in the left side
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 0, right = "auto", bottom = "auto",
width = 330, height = "auto",
h2("Taxi and Uber hourly flow change"),
selectInput("car","Car type",c("Taxi","Uber","Both"),selected = "Uber"),
textInput("date", "Choose date", "2015-1-8"),
sliderInput("time", "Hours of Day:",
min = 0, max = 24, value = 0, step = 1,
animate=animationOptions(interval = 500)),
helpText("Click play button to see dynamic flow data")
)
)
)
runApp()
View(ubercount_byhour_id)
View(taxicount_byhour_id)
paste( paste(2015,1,1,sep = "-"),
paste(2, ":00:00", sep = ""),
sep = " ")
library(shiny)
library(leaflet)
library(tibble)
library(rgeos)
library(sp)
library(rgdal)
library(leaflet)
library(htmlwidgets)
library(shiny)
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyverse)
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output")
################ Read Uber data
ubercount_byhour_id <- fread("ubercount_byhour_id.csv")
################ Read taxi data
load("PU16_Update.RData")  # dataframe name: cPU16_Update
taxi2016count_byhour_id<-PU16_Update
taxi2015count_byhour_id<-fread("PU15_Update.csv")
taxicount_byhour_id<-bind_rows(taxi2015count_byhour_id, taxi2016count_byhour_id)
both_byhour_id<-bind_rows(taxicount_byhour_id,ubercount_byhour_id)
max(taxicount_byhour_id$Count_byhour)
1436^(1/5)*200
1436^(1/9)*200
1436^(1/15)*200
1436^(1/20)*200
1436^(1/50)*200
1436^(1/100)*200
1436^(1/100)
1436^(1/15)
1436^(1/4)
1436^(1/3)
1436^(1/5)
library(shiny)
library(leaflet)
navbarPage("NYC TRAFFIC", id="nav",
tabPanel("Time Flow Map",
leafletOutput("map", width = "150%", height = 700),
#set panel in the left side
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 0, right = "auto", bottom = "auto",
width = 330, height = "auto",
h2("Taxi and Uber hourly flow change"),
selectInput("car","Car type",c("Taxi","Uber","Both"),selected = "Uber"),
textInput("date", "Choose date", "2015-1-1"),
sliderInput("time", "Hours of Day:",
min = 0, max = 24, value = 0, step = 1,
animate=animationOptions(interval = 100)),
helpText("Click play button to see dynamic flow data")
)
)
)
library(tibble)
library(rgeos)
library(sp)
library(rgdal)
library(leaflet)
library(htmlwidgets)
library(shiny)
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyverse)
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output")
################ Read Uber data
ubercount_byhour_id <- fread("ubercount_byhour_id.csv")
################ Read taxi data
load("count2016_1.RData")  # dataframe name: count_1
load("count2016_2.RData")  # dataframe name: count_2
load("count2016_3.RData")  # dataframe name: count_3
taxi2016count_byhour_id<-bind_rows(count_1,count_2,count_3)
taxi2015count_byhour_id<-fread("PU15_Update.csv")
################################# Test #################################
#sample2016 = count_e[1:1000000,]
#sample2016$Count_byhour = sample2016$Count_byhour/1000
#save(sample2016, file = "../lib/Panel2app/sample2016.RData")
#load("../lib/Panel2app/sample2016.RData")
#taxi2016count_byhour_id<-sample2016
############################## End Test #################################
taxicount_byhour_id<-bind_rows(taxi2015count_byhour_id, taxi2016count_byhour_id)
both_byhour_id<-bind_rows(taxicount_byhour_id,ubercount_byhour_id)
shinyServer(function(input, output) {
output$map<-renderLeaflet({
# Formalize the date and time
date = as.Date(input$date)
time = format(strptime(input$time, "%H"), format="%H:%M:%S")
date_time = paste(date, time, sep = " ")
if (input$car == 'Uber'){
t <- filter(ubercount_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "black",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else if(input$car == 'Taxi'){
t <- filter(taxicount_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "yellow",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else {
t <- filter(both_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "blue",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
})
})
runApp('~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/lib/Panel2app 3 counts version')
