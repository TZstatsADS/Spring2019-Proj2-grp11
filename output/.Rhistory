install.packages("itsmr")
taxi_zone = fread("../data/taxi trip/taxi_zone_lookup.csv")
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/data")
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/data")
library(data.table)
library(tibble)
library(dplyr)
library(tidyverse)
library("ggmap")
mykey = as.character(read.csv(file = "ggmap key.csv"), header = F)
mykey = as.character(read.csv(file = "ggmap key.csv",header = F))
mykey = "AIzaSyDj6W8F2IcxkcEnW-aKGmcJovBpMAhIAt4"
register_google(key = mykey)
taxi_zone = fread("../data/taxi trip/taxi_zone_lookup.csv")
View(taxi_zone)
taxigeo =taxi_zone %>%
mutate(Add = paste(`Zone`, "New York, NY", sep = ","))%>%
mutate_geocode(Add)
View(taxigeo)
colnames(taxigeo)[5] = "mean_long"
colnames(taxigeo)[6] = "mean_lat"
write_csv(taxigeo, path = "../output/TaxiGeo.csv")
library(shiny)
library(leaflet)
navbarPage("NYC TRAFFIC", id="nav",
tabPanel("Time Flow Map",
leafletOutput("map", width = "150%", height = 700),
#set panel in the left side
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 0, right = "auto", bottom = "auto",
width = 330, height = "auto",
h2("Taxi and Uber hourly flow change"),
selectInput("car","Car type",c("Taxi","Uber","Both"),selected = "Uber"),
textInput("date", "Choose date", "2015-1-1"),
sliderInput("time", "Hours of Day:",
min = 0, max = 24, value = 0, step = 1,
animate=animationOptions(interval = 100)),
helpText("Click play button to see dynamic flow data")
)
)
)
library(tibble)
library(rgeos)
library(sp)
library(rgdal)
library(leaflet)
library(htmlwidgets)
library(shiny)
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyverse)
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output")
################ Read Uber data
ubercount_byhour_id <- fread("ubercount_byhour_id.csv")
################ Read taxi data
load("count2016_1.RData")  # dataframe name: count_1
load("count2016_2.RData")  # dataframe name: count_2
load("count2016_3.RData")  # dataframe name: count_3
taxi2015count_byhour_id<-fread("PU15_Update.csv")
################################# Test #################################
#sample2016 = count_e[1:1000000,]
#sample2016$Count_byhour = sample2016$Count_byhour/1000
#save(sample2016, file = "../lib/Panel2app/sample2016.RData")
#load("../lib/Panel2app/sample2016.RData")
#taxi2016count_byhour_id<-sample2016
############################## End Test #################################
taxicount_byhour_id<-bind_rows(taxi2015count_byhour_id, taxi2016count_byhour_id)
taxi2016count_byhour_id<-bind_rows(count_1,count_2,count_3)
################################# Test #################################
#sample2016 = count_e[1:1000000,]
#sample2016$Count_byhour = sample2016$Count_byhour/1000
#save(sample2016, file = "../lib/Panel2app/sample2016.RData")
#load("../lib/Panel2app/sample2016.RData")
#taxi2016count_byhour_id<-sample2016
############################## End Test #################################
taxicount_byhour_id<-bind_rows(taxi2015count_byhour_id, taxi2016count_byhour_id)
both_byhour_id<-bind_rows(taxicount_byhour_id,ubercount_byhour_id)
shinyServer(function(input, output) {
output$map<-renderLeaflet({
# Formalize the date and time
date = as.Date(input$date)
time = format(strptime(input$time, "%H"), format="%H:%M:%S")
date_time = paste(date, time, sep = " ")
if (input$car == 'Uber'){
t <- filter(ubercount_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "black",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else if(input$car == 'Taxi'){
t <- filter(taxicount_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "yellow",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else {
t <- filter(both_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "blue",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
})
})
runApp('~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/lib/Panel2app')
1300^(1/8)*200
1300^(1/8)*100
1300^(1/8)*100
range(taxicount_byhour_id$Count_byhour)
shinyServer(function(input, output) {
output$map<-renderLeaflet({
# Formalize the date and time
date = as.Date(input$date)
time = format(strptime(input$time, "%H"), format="%H:%M:%S")
date_time = paste(date, time, sep = " ")
if (input$car == 'Uber'){
t <- filter(ubercount_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "black",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else if(input$car == 'Taxi'){
t <- filter(taxicount_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/8)*100,
color = "yellow",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else {
t <- filter(both_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "blue",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
})
})
navbarPage("NYC TRAFFIC", id="nav",
tabPanel("Time Flow Map",
leafletOutput("map", width = "150%", height = 700),
#set panel in the left side
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 0, right = "auto", bottom = "auto",
width = 330, height = "auto",
h2("Taxi and Uber hourly flow change"),
selectInput("car","Car type",c("Taxi","Uber","Both"),selected = "Uber"),
textInput("date", "Choose date", "2015-1-1"),
sliderInput("time", "Hours of Day:",
min = 0, max = 24, value = 0, step = 1,
animate=animationOptions(interval = 100)),
helpText("Click play button to see dynamic flow data")
)
)
)
runApp('~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/lib/Panel2app')
shinyServer(function(input, output) {
output$map<-renderLeaflet({
# Formalize the date and time
date = as.Date(input$date)
time = format(strptime(input$time, "%H"), format="%H:%M:%S")
date_time = paste(date, time, sep = " ")
if (input$car == 'Uber'){
t <- filter(ubercount_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "grey",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else if(input$car == 'Taxi'){
t <- filter(taxicount_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/8)*100,
color = "yellow",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else {
t <- filter(both_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "blue",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
})
})
runApp('~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/lib/Panel2app')
shinyServer(function(input, output) {
output$map<-renderLeaflet({
# Formalize the date and time
date = as.Date(input$date)
time = format(strptime(input$time, "%H"), format="%H:%M:%S")
date_time = paste(date, time, sep = " ")
if (input$car == 'Uber'){
t <- filter(ubercount_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "darkgrey",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else if(input$car == 'Taxi'){
t <- filter(taxicount_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/8)*100,
color = "yellow",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
else {
t <- filter(both_byhour_id, groups_byhour==date_time)
map<-leaflet(t)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,weight = 5,radius = ~Count_byhour^(1/4)*200,
color = "blue",stroke = TRUE,fillOpacity = 0.5)
return (map)
}
})
})
runApp('~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/lib/Panel2app')
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output")
library(sp)
library(dplyr)
################################
#########change this############
################################
#load('taxi2016_9.RData')
load('taxi2016_1.RData')
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output")
