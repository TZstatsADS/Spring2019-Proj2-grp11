}
else if(input$CF == "cluster1"){
pic1<-pic1 %>%
addPolygons(fillColor = ~pal2(count_result1$fit.cluster), color = 'grey', weight = 1, popup = popup3, fillOpacity = .6)
}
else if (input$CF == "cash"){
pic1<-pic1 %>%
addPolygons(fillColor =  ~pal3(payper$PercentagePayingCash), color = 'grey', weight = 1,
popup = popup4, fillOpacity = .6, group = group3) %>%
addLegend(position = 'bottomright',
colors = color[[3]],
labels = label[[3]], ## legend labels (only min and max)
opacity = 0.6,      ##transparency again
title = title[[3]])
}
###TOP5
if (input$top15count == TRUE){
pic1<-pic1 %>%
addMarkers(~top5count$center_lng, ~top5count$center_lat, icon = greenLeafIcon)
}
else{
pic1
}
if (input$top15FPD == TRUE){
pic1<-pic1 %>%
addMarkers(~top5FPD$center_lng, ~top5FPD$center_lat, icon = redLeafIcon)
}
else{
pic1
}
### subway analysis
if (input$subway == 1){
pic1
}
else if (input$subway == 2) {
pic1<-pic1 %>% addMarkers(data = subway1, ~Latitude, ~Longitude, clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = F))
}
else if (input$subway == 3){
pic1<-pic1 %>% addMarkers(data = subway2, ~L1, ~L2, clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = F))
}
})
# observeEvent(input$map_groups,{
#   map <- leafletProxy("map")%>% clearControls()
#   if (input$map_groups == group1)
#   {map<- map %>%
#     addLegend(position = "bottomright",
#               colors = color[[1]],
#               labels = label[[1]],
#               opacity = 0.6,
#               title = title[[1]])
#   }
#
#   else if (input$map_groups == group2)
#   {map <- map %>%
#     addLegend(position = 'bottomright',
#               colors = color[[2]],
#               labels = label[[2]], ## legend labels (only min and max)
#               opacity = 0.6,      ##transparency again
#               title = title[[2]])
#   }
# })
observe({
event <- input$map_shape_click
if (is.null(event))
return()
dattest = data.frame(Longitude = event$lng, Latitude = event$lat)
coordinates(dattest) <- ~ Longitude + Latitude
proj4string(dattest) <- CRS("+proj=longlat")
dattest <- spTransform(dattest, proj4string(myShape1))
rtest = over(dattest, myShape1)
output$districttimeplot <- renderPlot({
if (nrow(rtest) == 0) {
return(NULL)
}
if (input$days == "All Day"){
count_resultNTA = count_result[which(rownames(count_result) == rtest$NTACode),,]
count_resultNTA = apply(count_resultNTA, 1, sum)
index <- c(0:23)
dfcount_resultNTA <- data.frame(index, count_resultNTA)
ggplot(data=dfcount_resultNTA, aes(x=index, y=count_resultNTA)) + geom_bar(stat="identity") +
labs(x = "hour") + labs(y = "count per hour")+ggtitle("pick up count flow trend")+geom_smooth(formula = y~x)
}
else if (input$days == "Business Day"){
count_resultNTA = count_result[which(rownames(count_result) == rtest$NTACode),,1]
index <- c(0:23)
dfcount_resultNTA <- data.frame(index, count_resultNTA)
ggplot(data=dfcount_resultNTA, aes(x=index, y=count_resultNTA)) + geom_bar(stat="identity") +
labs(x = "hour") + labs(y = "count per hour")+ggtitle("pick up count flow trend")+geom_smooth(formula = y~x)
}
else if (input$days == "Not Business Day") {
count_resultNTA = count_result[which(rownames(count_result) == rtest$NTACode),,2]
index <- c(0:23)
dfcount_resultNTA <- data.frame(index, count_resultNTA)
ggplot(data=dfcount_resultNTA, aes(x=index, y=count_resultNTA)) + geom_bar(stat="identity") +
labs(x = "hour") + labs(y = "count per hour")+ggtitle("pick up count flow trend")+geom_smooth(formula = y~x)
}
})
})
output$map2 <- renderLeaflet({
leaflet() %>%
setView(lat=40.7128, lng=-74.0059, zoom=11) %>%
addProviderTiles('CartoDB.Positron')
})
drawvalue <- reactive({
if (input$pd == 'pick up'){
t <- filter(dynamicdata, pickup_hour == input$hours, pickup_date == "1/1/2015")
return(t)
}
else{
t <- filter(dynamicdata, dropoff_hour == input$hours, dropoff_date == "1/1/2015")
return(t)
}
})
observe({
radius <-  100
if (input$pd == 'Pick up')  {
t <- filter(dynamicdata, pickup_hour == input$hours, pickup_date == input$`choose date`)
longitudepmax <- max(t$pickup_longitude)
latitudepmax <- max(t$pickup_latitude)
longitudepmin <- min(t$pickup_longitude)
latitudepmin <- min(t$pickup_latitude)
leafletProxy("map2", data = t) %>%
clearShapes() %>%
addCircles(~pickup_longitude, ~pickup_latitude, radius=radius,
stroke=FALSE, fillOpacity=0.8,fillColor = "blue") %>%
addRectangles(
lng1=longitudepmax, lat1=latitudepmax,
lng2=longitudepmin, lat2=latitudepmin,
fillColor = "transparent"
)
}
else if (input$pd == 'Drop off')  {
t <- filter(dynamicdata, dropoff_hour == input$hours, dropoff_date == input$`choose date`)
longitudedmax <- max(t$dropoff_longitude)
latitudedmax <- max(t$dropoff_latitude)
longitudedmin <- min(t$dropoff_longitude)
latitudedmin <- min(t$dropoff_latitude)
leafletProxy("map2", data = t) %>%
clearShapes() %>%
addCircles(~dropoff_longitude, ~dropoff_latitude, radius=radius,
stroke=FALSE, fillOpacity=0.8,fillColor = "red") %>%
addRectangles(
lng1=longitudedmax, lat1=latitudedmax,
lng2=longitudedmin, lat2=latitudedmin,
fillColor = "transparent",
color = "red"
)
}
else if (input$pd == "All"){
t <- filter(dynamicdata, dropoff_hour == input$hours | pickup_hour == input$hours,
dropoff_date == input$`choose date` | pickup_date == input$`choose date`)
longitudepmax <- max(t$pickup_longitude)
latitudepmax <- max(t$pickup_latitude)
longitudepmin <- min(t$pickup_longitude)
latitudepmin <- min(t$pickup_latitude)
longitudedmax <- max(t$dropoff_longitude)
latitudedmax <- max(t$dropoff_latitude)
longitudedmin <- min(t$dropoff_longitude)
latitudedmin <- min(t$dropoff_latitude)
leafletProxy("map2", data = t) %>%
clearShapes() %>%
addCircles(~dropoff_longitude, ~dropoff_latitude, radius=radius,
stroke=FALSE, fillOpacity=0.8,fillColor = "red") %>%
addCircles(~pickup_longitude, ~pickup_latitude, radius=radius,
stroke=FALSE, fillOpacity=0.8,fillColor = "blue") %>%
addRectangles(
lng1=longitudepmax, lat1=latitudepmax,
lng2=longitudepmin, lat2=latitudepmin,
fillColor = "transparent"
) %>%
addRectangles(
lng1=longitudedmax, lat1=latitudedmax,
lng2=longitudedmin, lat2=latitudedmin,
fillColor = "transparent",
color = "red"
)
}
})
dataa<-fread("data/rawdata.csv",header = T)
output$rawtable <- DT::renderDataTable({
DT::datatable(dataa)
})
})
runApp('app')
library(shiny)
library(datasets)
library(leaflet)
library(data.table)
library(dplyr)
library(htmltools)
library(ggplot2)
library(ggvis)
library(leaflet)
library(htmltools)
install.packages("ggvis")
library(ggvis)
shinyUI(fluidPage(
tags$head(
tags$style(HTML("
h1 {
color: #000099;
}
body {
background-color: #FFFFFF;
}
"))
),
headerPanel("When Columbia Students Leave the Bubble..."),
sidebarLayout(position = "right",
sidebarPanel(
h4("Filter"),
selectInput ("Type", "Does your trip start or end at CU?", c("Start","End")),
dateRangeInput("Day", "Choose a date range in February",
start = "2015-02-14", end = "2015-02-14",
min = "2015-02-01", max = "2015-02-28"),
sliderInput("IntHour", "Start time (of the first date)", 0, 24, 18, step = 1),
sliderInput("EndHour", "End time (of the last date)", 0, 24, 20, step = 1),
sliderInput("Amount", "Number of trips to display", 1, 1000, 50, step =10),
submitButton("Submit"),
style = "opacity : 0.85"
),
mainPanel(
leafletOutput("map", width = "150%", height = 700)
)
),
plotOutput('plot', width = '100%', height = 1000)
))
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spr2016-Proj2-Grp5")
# Import all library
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spr2016-Proj2-Grp5")
# Import filtered data
yellowpickup<-fread('../data/yellowpickup.csv')
# Import all library
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spr2016-Proj2-Grp5")
# Import filtered data
yellowpickup<-fread('../data/yellowpickup.csv')
# Import filtered data
yellowpickup<-fread('data/yellowpickup.csv')
yellowdropoff<-fread('data/yellowdropoff.csv')
point = makeIcon("../doc/blue.png", 13, 13)
# Import filtered data
yellowpickup<-fread('../data/yellowpickup.csv')
point = makeIcon("doc/blue.png", 13, 13)
yellow <- rbind(yellowpickup, yellowdropoff)
yellownew <- yellow[c(sample(1:246816), 100),]
yellowfiltered <- yellownew %>% filter (fare_amount >= 0, fare_amount <= 100, tip_amount <= 100)
alpha = 0.007
# Begin server code
shinyServer(function(input, output){
# Set dates
intdate <- reactive({
intdate <- as.POSIXct(paste(as.character(input$Day[1]),
as.character(input$IntHour)),
format = "%Y-%m-%d %H")
})
enddate <- reactive({
enddate <- as.POSIXct(paste(as.character(input$Day[2]),
as.character(input$EndHour)),
format = "%Y-%m-%d %H")
})
type <- reactive({
type <- as.character(input$Type)
})
# Compare and filter data
temp <- reactive({
if (type() == "Start"){
temp <- yellowpickup %>% filter(tpep_pickup_datetime >= intdate(),
tpep_pickup_datetime <= enddate())
}
else {
temp <- yellowdropoff %>% filter(tpep_pickup_datetime >= intdate(),
tpep_pickup_datetime <= enddate())
}
})
amount <- reactive({
amount <- input$Amount
})
# Draw map
output$map <- renderLeaflet({
if (type() == "Start"){
leaflet(data = temp()[c(sample(1:dim(temp())[1], amount())),]) %>%
addTiles() %>%
setView(lng = -73.971035, lat = 40.775659, zoom = 12) %>%
addMarkers(~dropoff_longitude, ~dropoff_latitude,
icon= point,
popup = ~ as.character(paste("Fare: ", fare_amount,
"Tip: ", tip_amount,
"Ratio: ", round(tip_amount/fare_amount, 3)))
)
}
else{
leaflet(data = temp()[c(sample(1:dim(temp())[1], amount())),]) %>%
addTiles() %>%
setView(lng = -73.971035, lat = 40.775659, zoom = 12) %>%
addMarkers(~pickup_longitude, ~pickup_latitude,
icon= point,
popup = ~ as.character(paste("Fare: ", fare_amount,
"Tip: ", tip_amount,
"Ratio: ", round(tip_amount/fare_amount, 3)))
)
}
})
output$plot <- renderPlot({
qplot(fare_amount,  tip_amount, data = yellowfiltered,
xlab = 'Fare Amount', ylab = 'Tip Amount'
)
})
})
runApp('app')
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11")
## Define Manhattan's neighborhood
man.nbhd=c("all neighborhoods", "Central Harlem",
"Chelsea and Clinton",
"East Harlem",
"Gramercy Park and Murray Hill",
"Greenwich Village and Soho",
"Lower Manhattan",
"Lower East Side",
"Upper East Side",
"Upper West Side",
"Inwood and Washington Heights")
runApp('app')
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("2009 Manhattan Housing Sales"),
# Sidebar with a selector input for neighborhood
sidebarLayout(
sidebarPanel(
selectInput("nbhd", label = h5("Choose a Manhattan Neighborhood"),
choices = list("all neighborhoods"=0,
"Central Harlem"=1,
"Chelsea and Clinton"=2,
"East Harlem"=3,
"Gramercy Park and Murray Hill"=4,
"Greenwich Village and Soho"=5,
"Lower Manhattan"=6,
"Lower East Side"=7,
"Upper East Side"=8,
"Upper West Side"=9,
"Inwood and Washington Heights"=10),
selected = 0)
#sliderInput("p.range", label=h3("Price Range (in thousands of dollars)"),
#            min = 0, max = 20000, value = c(200, 10000))
),
# Show two panels
mainPanel(
#h4(textOutput("text")),
h3(code(textOutput("text1"))),
tabsetPanel(
# Panel 1 has three summary plots of sales.
tabPanel("Sales summary", plotOutput("distPlot")),
# Panel 2 has a map display of sales' distribution
tabPanel("Sales map", plotOutput("distPlot1"))),
leafletOutput("map", width = "80%", height = "400px")
)
)
))
zip.nbhd=as.list(1:length(man.nbhd))
zip.nbhd[[1]]=as.character(c(10026, 10027, 10030, 10037, 10039))
zip.nbhd[[2]]=as.character(c(10001, 10011, 10018, 10019, 10020))
zip.nbhd[[3]]=as.character(c(10036, 10029, 10035))
zip.nbhd[[4]]=as.character(c(10010, 10016, 10017, 10022))
zip.nbhd[[5]]=as.character(c(10012, 10013, 10014))
zip.nbhd[[6]]=as.character(c(10004, 10005, 10006, 10007, 10038, 10280))
zip.nbhd[[7]]=as.character(c(10002, 10003, 10009))
zip.nbhd[[8]]=as.character(c(10021, 10028, 10044, 10065, 10075, 10128))
zip.nbhd[[9]]=as.character(c(10023, 10024, 10025))
zip.nbhd[[10]]=as.character(c(10031, 10032, 10033, 10034, 10040))
## Load housing data
load("../output/count.RData")
load("../output/mh2009use.RData")
## Load housing data
load("output/count.RData")
load("output/mh2009use.RData")
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
## Neighborhood name
output$text = renderText({"Selected:"})
output$text1 = renderText({
paste("{ ", man.nbhd[as.numeric(input$nbhd)+1], " }")
})
## Panel 1: summary plots of time trends,
##          unit price and full price of sales.
output$distPlot <- renderPlot({
## First filter data for selected neighborhood
mh2009.sel=mh2009.use
if(input$nbhd>0){
mh2009.sel=mh2009.use%>%
filter(region %in% zip.nbhd[[as.numeric(input$nbhd)]])
}
## Monthly counts
month.v=as.vector(table(mh2009.sel$sale.month))
## Price: unit (per sq. ft.) and full
type.price=data.frame(bldg.type=c("10", "13", "25", "28"))
type.price.sel=mh2009.sel%>%
group_by(bldg.type)%>%
summarise(
price.mean=mean(sale.price, na.rm=T),
price.median=median(sale.price, na.rm=T),
unit.mean=mean(unit.price, na.rm=T),
unit.median=median(unit.price, na.rm=T),
sale.n=n()
)
type.price=left_join(type.price, type.price.sel, by="bldg.type")
## Making the plots
layout(matrix(c(1,1,1,1,2,2,3,3,2,2,3,3), 3, 4, byrow=T))
par(cex.axis=1.3, cex.lab=1.5,
font.axis=2, font.lab=2, col.axis="dark gray", bty="n")
### Sales monthly counts
plot(1:12, month.v, xlab="Months", ylab="Total sales",
type="b", pch=21, col="black", bg="red",
cex=2, lwd=2, ylim=c(0, max(month.v,na.rm=T)*1.05))
### Price per square foot
plot(c(0, max(type.price[,c(4,5)], na.rm=T)),
c(0,5),
xlab="Price per square foot", ylab="",
bty="l", type="n")
text(rep(0, 4), 1:4+0.5, paste(c("coops", "condos", "luxury hotels", "comm. condos"),
type.price$sale.n, sep=": "), adj=0, cex=1.5)
points(type.price$unit.mean, 1:nrow(type.price), pch=16, col=2, cex=2)
points(type.price$unit.median, 1:nrow(type.price),  pch=16, col=4, cex=2)
segments(type.price$unit.mean, 1:nrow(type.price),
type.price$unit.median, 1:nrow(type.price),
lwd=2)
### full price
plot(c(0, max(type.price[,-1], na.rm=T)),
c(0,5),
xlab="Sales Price", ylab="",
bty="l", type="n")
text(rep(0, 4), 1:4+0.5, paste(c("coops", "condos", "luxury hotels", "comm. condos"),
type.price$sale.n, sep=": "), adj=0, cex=1.5)
points(type.price$price.mean, 1:nrow(type.price), pch=16, col=2, cex=2)
points(type.price$price.median, 1:nrow(type.price),  pch=16, col=4, cex=2)
segments(type.price$price.mean, 1:nrow(type.price),
type.price$price.median, 1:nrow(type.price),
lwd=2)
})
## Panel 2: map of sales distribution
output$distPlot1 <- renderPlot({
count.df.sel=count.df
if(input$nbhd>0){
count.df.sel=count.df%>%
filter(region %in% zip.nbhd[[as.numeric(input$nbhd)]])
}
# make the map for selected neighhoods
zip_choropleth(count.df.sel,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
})
## Panel 3: leaflet
output$map <- renderLeaflet({
count.df.sel=count.df
if(input$nbhd>0){
count.df.sel=count.df%>%
filter(region %in% zip.nbhd[[as.numeric(input$nbhd)]])
}
# From https://data.cityofnewyork.us/Business/Zip-Code-Boundaries/i8iw-xf4u/data
NYCzipcodes <- readOGR("../data/ZIP_CODE_040114.shp",
#layer = "ZIP_CODE",
verbose = FALSE)
selZip <- subset(NYCzipcodes, NYCzipcodes$ZIPCODE %in% count.df.sel$region)
# ----- Transform to EPSG 4326 - WGS84 (required)
subdat<-spTransform(selZip, CRS("+init=epsg:4326"))
# ----- save the data slot
subdat_data=subdat@data[,c("ZIPCODE", "POPULATION")]
subdat.rownames=rownames(subdat_data)
subdat_data=
subdat_data%>%left_join(count.df, by=c("ZIPCODE" = "region"))
rownames(subdat_data)=subdat.rownames
# ----- to write to geojson we need a SpatialPolygonsDataFrame
subdat<-SpatialPolygonsDataFrame(subdat, data=subdat_data)
# ----- set uo color pallette https://rstudio.github.io/leaflet/colors.html
# Create a continuous palette function
pal <- colorNumeric(
palette = "Blues",
domain = subdat$POPULATION
)
leaflet(subdat) %>%
addTiles()%>%
addPolygons(
stroke = T, weight=1,
fillOpacity = 0.6,
color = ~pal(POPULATION)
)
})
})
runApp('app')
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11")
library(shiny)
library(choroplethr)
library(dplyr)
library(leaflet)
library(maps)
library(rgdal)
## Define Manhattan's neighborhood
man.nbhd=c("all neighborhoods", "Central Harlem",
"Chelsea and Clinton",
"East Harlem",
"Gramercy Park and Murray Hill",
"Greenwich Village and Soho",
"Lower Manhattan",
"Lower East Side",
"Upper East Side",
"Upper West Side",
"Inwood and Washington Heights")
zip.nbhd=as.list(1:length(man.nbhd))
zip.nbhd
library("choroplethrZip")
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')
