Nig
nog
rig
rod
r
r <- 4
print rapply
print r
r
r[0]
r[1]
r <- 3
knitr::opts_chunk$set(echo = TRUE)
library(tm)
install.packages(c("tm", "tidytext", "tidyverse", "DT"))
library(tm)
library(tidytext)
library(tidyverse)
library(DT)
urlfile<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/cleaned_hm.csv'
hm_data <- read_csv(urlfile)
corpus <- VCorpus(VectorSource(hm_data$cleaned_hm))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removePunctuation)%>%
tm_map(removeNumbers)%>%
tm_map(removeWords, character(0))%>%
tm_map(stripWhitespace)
stemmed <- tm_map(corpus, stemDocument) %>%
tidy() %>%
select(text)
dict <- tidy(corpus) %>%
select(text) %>%
unnest_tokens(dictionary, text)
data("stop_words")
word <- c("happy","ago","yesterday","lot","today","months","month",
"happier","happiest","last","week","past")
stop_words <- stop_words %>%
bind_rows(mutate(tibble(word), lexicon = "updated"))
completed <- stemmed %>%
mutate(id = row_number()) %>%
unnest_tokens(stems, text) %>%
bind_cols(dict) %>%
anti_join(stop_words, by = c("dictionary" = "word"))
completed <- completed %>%
group_by(stems) %>%
count(dictionary) %>%
mutate(word = dictionary[which.max(n)]) %>%
ungroup() %>%
select(stems, word) %>%
distinct() %>%
right_join(completed) %>%
select(-stems)
completed <- completed %>%
group_by(id) %>%
summarise(text = str_c(word, collapse = " ")) %>%
ungroup()
hm_data <- hm_data %>%
mutate(id = row_number()) %>%
inner_join(completed)
datatable(hm_data)
write_csv(hm_data, "../output/processed_moments.csv")
runApp(getwd())
install.packages("shiny")
shiny::runApp('Downloads/wk4-Shiny_tutorial')
runApp('Downloads/wk4-Shiny_tutorial')
runApp('Downloads/wk4-Shiny_tutorial')
shiny::runApp('Documents/GitHub/Spr2017-proj2-grp2/app')
install.packages(leaflet)
install.packages("leaflet")
runApp('Documents/GitHub/Spr2017-proj2-grp2/app')
runApp('Documents/GitHub/Spr2017-proj2-grp2/app')
runApp('Documents/GitHub/Spr2017-proj2-grp2/app')
runApp('Documents/GitHub/Spr2017-proj2-grp2/app')
runApp('Documents/GitHub/Spr2017-proj2-grp2/app')
shiny::runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
?frame_data
?frame
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
count_seperated.RData
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
packages.used=c("rgeos", "sp", "rgdal",
"leaflet", "htmlwidgets", "shiny",
"ggplot2", "dplyr", "data.table","DT", "readr")
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
install.packages("readr")
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
shiny::runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
shiny::runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
packages.used=c("rgeos", "sp", "rgdal",
"leaflet", "htmlwidgets", "shiny",
"ggplot2", "dplyr", "data.table","DT", "tidyverse")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(rgeos)
library(sp)
library(rgdal)
library(leaflet)
library(htmlwidgets)
library(shiny)
library(ggplot2)
library(dplyr)
library(data.table)
library(readr)
# set group based on radio selection
group1 = "<span style='color: #7f0000; font-size: 11pt'><strong>count</strong></span>"
group2 = "<span style='color: #7f0000; font-size: 11pt'><strong>FPD</strong></span>"
group3 = "<span style='color: #7f0000; font-size: 11pt'><strong>Percentage Cash Paying:</strong></span>"
# set color scheme
color = list(color1 = c('#F2D7D5', '#CD6155', '#C0392B','#641E16'),
color2 = c('#e6f5ff','#abdcff', '#70c4ff', '#0087e6', '#005998','#00365d','#1B4F72'),
color3 = c("#F7FCF5","#74C476", "#005A32"))
# set bin sizes and make legend in the bottom right
bin = list(bin1 = c(0,100,1000,10000,100000), bin2 = c(0,1,2,3,4,5))
label = list(label1 = c("<100","100-1000","1000~10,000","10,000~100,000"),
label2 = c("0-1","2-3","3-4","4-5","5-6","6","7+"),
label3 = c("<0.4","0.4~0.6",">0.6"))
title = list(t1 = "Pick Up Numbers", t2 = "Fair Per Distance",t3  = "PercentagePayingCash")
# load shape data
load('output/myShape1.RData')
subdat<-spTransform(myShape1, CRS("+init=epsg:4326"))
runApp('Documents/GitHub/Spring2019-Proj2-grp11/app')
setwd("~/Documents/GitHub/Spring2019-Proj2-grp11")
packages.used=c("rgeos", "sp", "rgdal",
"leaflet", "htmlwidgets", "shiny",
"ggplot2", "dplyr", "data.table","DT", "tidyverse")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(rgeos)
library(sp)
library(rgdal)
library(leaflet)
library(htmlwidgets)
library(shiny)
library(ggplot2)
library(dplyr)
library(data.table)
library(readr)
setwd("Documents/GitHub/Spring2019-Proj2-grp11/")
# set group based on radio selection
group1 = "<span style='color: #7f0000; font-size: 11pt'><strong>count</strong></span>"
group2 = "<span style='color: #7f0000; font-size: 11pt'><strong>FPD</strong></span>"
group3 = "<span style='color: #7f0000; font-size: 11pt'><strong>Percentage Cash Paying:</strong></span>"
# set color scheme
color = list(color1 = c('#F2D7D5', '#CD6155', '#C0392B','#641E16'),
color2 = c('#e6f5ff','#abdcff', '#70c4ff', '#0087e6', '#005998','#00365d','#1B4F72'),
color3 = c("#F7FCF5","#74C476", "#005A32"))
# set bin sizes and make legend in the bottom right
bin = list(bin1 = c(0,100,1000,10000,100000), bin2 = c(0,1,2,3,4,5))
label = list(label1 = c("<100","100-1000","1000~10,000","10,000~100,000"),
label2 = c("0-1","2-3","3-4","4-5","5-6","6","7+"),
label3 = c("<0.4","0.4~0.6",">0.6"))
title = list(t1 = "Pick Up Numbers", t2 = "Fair Per Distance",t3  = "PercentagePayingCash")
# load shape data
load('output/myShape1.RData')
runApp('app')
runApp('app')
runApp('app')
count_result1 <- JFK_count_result
# load shape data
load('output/myShape1.RData')
#setwd("Documents/GitHub/Spring2019-Proj2-grp11/")
setwd("../")
# set group based on radio selection
group1 = "<span style='color: #7f0000; font-size: 11pt'><strong>count</strong></span>"
group2 = "<span style='color: #7f0000; font-size: 11pt'><strong>FPD</strong></span>"
group3 = "<span style='color: #7f0000; font-size: 11pt'><strong>Percentage Cash Paying:</strong></span>"
# set color scheme
color = list(color1 = c('#F2D7D5', '#CD6155', '#C0392B','#641E16'),
color2 = c('#e6f5ff','#abdcff', '#70c4ff', '#0087e6', '#005998','#00365d','#1B4F72'),
color3 = c("#F7FCF5","#74C476", "#005A32"))
# set bin sizes and make legend in the bottom right
bin = list(bin1 = c(0,100,1000,10000,100000), bin2 = c(0,1,2,3,4,5))
label = list(label1 = c("<100","100-1000","1000~10,000","10,000~100,000"),
label2 = c("0-1","2-3","3-4","4-5","5-6","6","7+"),
label3 = c("<0.4","0.4~0.6",">0.6"))
title = list(t1 = "Pick Up Numbers", t2 = "Fair Per Distance",t3  = "PercentagePayingCash")
# load shape data
load('output/myShape1.RData')
subdat<-spTransform(myShape1, CRS("+init=epsg:4326"))
getwd()
setwd("Spring2019-Proj2-grp11/app")
runApp()
getwd()
runApp()
# load airport traffic data
load('output/RSummarized/JFK_count_seperated.RData')
library(leaflet)
#Choices for drop-downs
vars <- c(
"Business Day" = 1,
"Not Business Day" = 2
)
navbarPage("NYC TAXI", id="nav",
#title = 'taxi menu',
tabPanel("Airport Map",
div(class="outer",
tags$head(
# Include our custom CSS
includeCSS("styles.css"),
includeScript("gomap.js")
),
leafletOutput("map", width="100%", height="100%"),
# Shiny versions prior to 0.11 should use class="modal" instead.
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = F, top = 60, left = "auto", right = 0, bottom = "auto",
width = 160, height = 180,
radioButtons("CF", label = "Layers",
choices = list("Count Number" = "count", "Fare Per Distance" = "FPD", "Cash Paying Percentage" = "cash"),
selected = "count")
),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 0, right = "auto", bottom = "auto",
width = 330, height = "auto",
h3("Panel"),
selectInput("days", "Days", c("All Day", "Business Day", "Not Business Day"),selected = "All Day"),
checkboxInput(inputId = "showhr",
label = strong("Show hours"),
value = FALSE),
conditionalPanel(condition = "input.showhr == false"
),
conditionalPanel(condition = "input.showhr == true",
sliderInput(inputId = "hr_adjust",
label = "Choose the time of the day:",
min = 0, max = 23, value = NULL, step = 1)
),
selectInput("airport", "Airport", c("JFK", "LGA", "NWK"),selected = "JFK"),
plotOutput("air_districttimeplot", height = 280),
helpText(   a("Analysis",
href="https://github.com/TZstatsADS/Spr2017-proj2-grp2/blob/master/doc/analysis.html")
)
)
# absolutePanel(id="graphstuff",class = "panel panel-default", fixed=TRUE,
#               draggable = TRUE, top=55, left="auto", right= 5, bottom="auto",width=300,
#               height=100, style="opacity:0.65",
#
#
#               h4("hourly flow change", align = "center"),
#               plotOutput("districttimeplot",height = 200))
)
)
)
library(shiny)
navbarPage("NYC TAXI", id="nav",
#title = 'taxi menu',
tabPanel("Airport Map",
div(class="outer",
tags$head(
# Include our custom CSS
includeCSS("styles.css"),
includeScript("gomap.js")
),
leafletOutput("map", width="100%", height="100%"),
# Shiny versions prior to 0.11 should use class="modal" instead.
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = F, top = 60, left = "auto", right = 0, bottom = "auto",
width = 160, height = 180,
radioButtons("CF", label = "Layers",
choices = list("Count Number" = "count", "Fare Per Distance" = "FPD", "Cash Paying Percentage" = "cash"),
selected = "count")
),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 0, right = "auto", bottom = "auto",
width = 330, height = "auto",
h3("Panel"),
selectInput("days", "Days", c("All Day", "Business Day", "Not Business Day"),selected = "All Day"),
checkboxInput(inputId = "showhr",
label = strong("Show hours"),
value = FALSE),
conditionalPanel(condition = "input.showhr == false"
),
conditionalPanel(condition = "input.showhr == true",
sliderInput(inputId = "hr_adjust",
label = "Choose the time of the day:",
min = 0, max = 23, value = NULL, step = 1)
),
selectInput("airport", "Airport", c("JFK", "LGA", "NWK"),selected = "JFK"),
plotOutput("air_districttimeplot", height = 280),
helpText(   a("Analysis",
href="https://github.com/TZstatsADS/Spr2017-proj2-grp2/blob/master/doc/analysis.html")
)
)
# absolutePanel(id="graphstuff",class = "panel panel-default", fixed=TRUE,
#               draggable = TRUE, top=55, left="auto", right= 5, bottom="auto",width=300,
#               height=100, style="opacity:0.65",
#
#
#               h4("hourly flow change", align = "center"),
#               plotOutput("districttimeplot",height = 200))
)
)
)
library(rgeos)
library(sp)
library(rgdal)
library(leaflet)
library(htmlwidgets)
library(shiny)
library(ggplot2)
library(dplyr)
library(data.table)
library(readr)
getwd()
library(rgeos)
library(sp)
library(rgdal)
library(leaflet)
library(htmlwidgets)
library(shiny)
library(ggplot2)
library(dplyr)
library(data.table)
library(readr)
library(leaflet)
library(shiny)
#Choices for drop-downs
vars <- c(
"Business Day" = 1,
"Not Business Day" = 2
)
navbarPage("NYC TAXI", id="nav",
#title = 'taxi menu',
tabPanel("Airport Map",
div(class="outer",
tags$head(
# Include our custom CSS
includeCSS("styles.css"),
includeScript("gomap.js")
),
leafletOutput("map", width="100%", height="100%"),
# Shiny versions prior to 0.11 should use class="modal" instead.
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = F, top = 60, left = "auto", right = 0, bottom = "auto",
width = 160, height = 180,
radioButtons("CF", label = "Layers",
choices = list("Count Number" = "count", "Fare Per Distance" = "FPD", "Cash Paying Percentage" = "cash"),
selected = "count")
),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 0, right = "auto", bottom = "auto",
width = 330, height = "auto",
h3("Panel"),
selectInput("days", "Days", c("All Day", "Business Day", "Not Business Day"),selected = "All Day"),
checkboxInput(inputId = "showhr",
label = strong("Show hours"),
value = FALSE),
conditionalPanel(condition = "input.showhr == false"
),
conditionalPanel(condition = "input.showhr == true",
sliderInput(inputId = "hr_adjust",
label = "Choose the time of the day:",
min = 0, max = 23, value = NULL, step = 1)
),
selectInput("airport", "Airport", c("JFK", "LGA", "NWK"),selected = "JFK"),
plotOutput("air_districttimeplot", height = 280),
helpText(   a("Analysis",
href="https://github.com/TZstatsADS/Spr2017-proj2-grp2/blob/master/doc/analysis.html")
)
)
# absolutePanel(id="graphstuff",class = "panel panel-default", fixed=TRUE,
#               draggable = TRUE, top=55, left="auto", right= 5, bottom="auto",width=300,
#               height=100, style="opacity:0.65",
#
#
#               h4("hourly flow change", align = "center"),
#               plotOutput("districttimeplot",height = 200))
)
)
)
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11")
#setwd("~Documents/GitHub/Spring2019-Proj2-grp11/")
setwd("../")
library(rgeos)
library(sp)
library(rgdal)
library(leaflet)
library(htmlwidgets)
library(shiny)
library(ggplot2)
library(dplyr)
library(data.table)
library(readr)
# set group based on radio selection
group1 = "<span style='color: #7f0000; font-size: 11pt'><strong>count</strong></span>"
group2 = "<span style='color: #7f0000; font-size: 11pt'><strong>FPD</strong></span>"
group3 = "<span style='color: #7f0000; font-size: 11pt'><strong>Percentage Cash Paying:</strong></span>"
# set color scheme
color = list(color1 = c('#F2D7D5', '#CD6155', '#C0392B','#641E16'),
color2 = c('#e6f5ff','#abdcff', '#70c4ff', '#0087e6', '#005998','#00365d','#1B4F72'),
color3 = c("#F7FCF5","#74C476", "#005A32"))
# set bin sizes and make legend in the bottom right
bin = list(bin1 = c(0,100,1000,10000,100000), bin2 = c(0,1,2,3,4,5))
label = list(label1 = c("<100","100-1000","1000~10,000","10,000~100,000"),
label2 = c("0-1","2-3","3-4","4-5","5-6","6","7+"),
label3 = c("<0.4","0.4~0.6",">0.6"))
title = list(t1 = "Pick Up Numbers", t2 = "Fair Per Distance",t3  = "PercentagePayingCash")
# load shape data
load('output/myShape1.RData')
# load shape data
load('../output/myShape1.RData')
geted()
getwd
getwd()
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spr2017-proj2-grp2")
# load shape data
load('../output/myShape1.RData')
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11")
# load shape data
load('output/myShape1.RData')
subdat<-spTransform(myShape1, CRS("+init=epsg:4326"))
# load dynamic data
dynamicdata = fread("data/pickupDropoff date_hour.csv", header = TRUE, stringsAsFactors=F)
# load airport traffic data
load('output/RSummarized/JFK_count_seperated.RData')
load('output/RSummarized/JFK_FPD_seperated.RData')
load('output/RSummarized/NWK_count_seperated.RData')
load('output/RSummarized/NWK_FPD_seperated.RData')
load('output/RSummarized/LGA_count_seperated.RData')
load('output/RSummarized/LGA_FPD_seperated.RData')
# load interactive data
load('output/count_seperated.RData')
load('output/FPD_seperated.RData')
# names of each borough. subdat is transformed shape1 file
rownames(count_result) = subdat@data$NTACode
# summarized data
payper = read.csv("data/Data_frame_of_summary.csv")
#initialize data
count_result1 <- JFK_count_result
FPD_result1 <- JFK_FPD_result
# load shape data
load('output/myShape1.RData')
subdat<-spTransform(myShape1, CRS("+init=epsg:4326"))
# load dynamic data
dynamicdata = fread("data/pickupDropoff date_hour.csv", header = TRUE, stringsAsFactors=F)
# load airport traffic data
load('output/RSummarized/JFK_count_seperated.RData')
load('output/RSummarized/JFK_FPD_seperated.RData')
load('output/RSummarized/NWK_count_seperated.RData')
load('output/RSummarized/NWK_count_seperated.RData')
load('output/RSummarized/NWK_FPD_seperated.RData')
load('output/RSummarized/LGA_count_seperated.RData')
load('output/RSummarized/LGA_FPD_seperated.RData')
