write_csv(stock.data, "~/Desktop/GR5241 Stat ML/HW/hw 2/Dow Jones Stocks")
write_csv(stock.data, "~/Desktop/GR5241 Stat ML/HW/hw 2/Dow Jones Stocks.csv")
mode(stock.data)
stock.data = as.data.frame(stock.data)
write_csv(stock.data, "~/Desktop/GR5241 Stat ML/HW/hw 2/Dow Jones Stocks.csv")
View(stock.data)
stock.data = data.frame()
for (i in 1:length(symbol)){
data = getSymbols(symbol[i], auto.assign = F,
from = "2018-01-01", to = "2019-01-01",
getSymbols.yahoo.warning = FALSE)[,4]
stock.data = cbind(stock.data, data)
}
stock.data = as.data.frame(stock.data)
View(stock.data)
write_csv(stock.data, "~/Desktop/GR5241 Stat ML/HW/hw 2/Dow Jones Stocks.csv")
closing_prices = as.data.frame(stock.data)
write_csv(closing_prices, "~/Desktop/GR5241 Stat ML/HW/hw 2/Dow Jones Cosing Prices.csv")
dim(closing_prices)
?princomp
princomp(closing_prices, cor = F)
PC = princomp(closing_prices, cor = F)
biplot(PC)
t(closing_prices)
dim(closing_prices)
â‰ˆPC = princomp(t(closing_prices), cor = F)
PC = princomp(t(closing_prices), cor = F)
biplot(PC)
PC
t.closing = t(closing_prices)
View(t.closing)
PC$
biplot(PC)
biplot(PC)
princomp(t.closing)
screeplot(PC$sdev)
screeplot(PC)
screeplot(PC, type = "lines")
screeplot(PC, type = "o")
lines
screeplot(PC, type = "lines")
screeplot(PC, type = "lines", npcs = 10)
screeplot(PC, type = "lines", npcs = 10, main = "Scree Plot")
biplot(PC)
screeplot(PC, type = "lines", npcs = 10, main = "Scree Plot")
biplot(PC, cex = 0.5)
pvar = PC$sdev^2/sum(PC$sdev)
plot(pvar,xlab="Principal component", ylab="Proportion of variance explained", ylim=c(0,1), type='b')
mac(pvar)
max(pvar)
plot(pvar,xlab="Principal component", ylab="Proportion of variance explained", ylim=c(0,10), type='b')
PC$sdev
pvar = PC$sdev^2/sum(PC$sdev^2)
plot(pvar,xlab="Principal component", ylab="Proportion of variance explained", ylim=c(0,1), type='b')
plot(pvar,xlab="Principal component", ylab="Proportion of variance explained", ylim=c(0,1), type='l')
plot(pvar,xlab="Principal component", ylab="Proportion of variance explained", ylim=c(0,1), type='p')
plot(pvar,xlab="Principal component", ylab="Proportion of variance explained", ylim=c(0,1), type='o')
plot(pvar,xlab="Principal component", main = "Scree Plot",
ylab="Proportion of variance explained", ylim=c(0,1), type='o')
biplot(PC, cex = 0.5)
biplot(PC, cex = 0.5)
biplot(PC, cex = 1)
biplot(PC, cex = 0.8)
plot(pvar,xlab="Principal component", main = "Scree Plot",
ylab="Proportion of variance explained", ylim=c(0,1), type='o')
pvar
cvar = cumsum(pvar)
plot(cvar,xlab="Principal component", main = "Scree Plot",
ylab="Proportion of variance explained", ylim=c(0,1), type='o')
plot(cvar,xlab="Principal component", main = "Scree Plot",
ylab="Cumulative Proportion of variance explained", ylim=c(0,1), type='o')
par(mfrow = c(1,2))
par(mfrow = c(1,2))
plot(pvar,xlab="Principal component", main = "Scree Plot",
ylab="Proportion of variance explained", ylim=c(0,1), type='o')
plot(cvar,xlab="Principal component", main = "Scree Plot",
ylab="Cumulative Proportion of variance explained", ylim=c(0,1), type='o')
par(mfrow = c(1,2))
plot(pvar,xlab="Principal component", main = "Scree Plot",
ylab="Prop. of variance explained", ylim=c(0,1), type='o')
plot(cvar,xlab="Principal component", main = "Scree Plot",
ylab="Cumulative Prop. of variance explained", ylim=c(0,1), type='o')
PC.scale = princomp(closing_prices, cor = T)
biplot(PC.scale, cex = 0.8)
pvar.scale = PC.scale$sdev^2/sum(PC.scale$sdev^2)   # Single proportion of var explained
cvar.scale = cumsum(pvar.scale)               # Cumulative proportion of var explained
par(mfrow = c(1,2))
plot(pvar.scale,xlab="Principal component", main = "Scree Plot",
ylab="Prop. of variance explained", ylim=c(0,1), type='o')
plot(cvar.scale,xlab="Principal component", main = "Scree Plot",
ylab="Cumulative Prop. of variance explained", ylim=c(0,1), type='o')
PC.scale = princomp(closing_prices, cor = T)
par(mfrow = c(1,1))
biplot(PC.scale, cex = 0.8)
pvar.scale = PC.scale$sdev^2/sum(PC.scale$sdev^2)   # Single proportion of var explained
cvar.scale = cumsum(pvar.scale)               # Cumulative proportion of var explained
par(mfrow = c(1,2))
plot(pvar.scale,xlab="Principal component", main = "Scree Plot",
ylab="Prop. of variance explained", ylim=c(0,1), type='o')
plot(cvar.scale,xlab="Principal component", main = "Scree Plot",
ylab="Cumulative Prop. of variance explained", ylim=c(0,1), type='o')
View(data)
full.data = getSymbols(symbol[1], auto.assign = F,
from = "2018-01-01", to = "2019-01-01",
getSymbols.yahoo.warning = FALSE)
View(full.data)
stock.return = data.frame()
stock.return = data.frame()
for (i in 1:length(symbol)){
# extract closing prices only
opening = getSymbols(symbol[i], auto.assign = F,
from = "2018-01-01", to = "2019-01-01",
getSymbols.yahoo.warning = FALSE)[,1]
closing = closing_prices[,i]
# stock_volume = getSymbols(symbol[i], auto.assign = F,
# from = "2018-01-01", to = "2019-01-01",
# getSymbols.yahoo.warning = FALSE)[,5]
# return = (closing - opening) * stock_volume
return = closing - opening
stock.return = cbind(stock.return, return)
}
return = as.data.frame(stock.return)
dim(return)
View(return)
stock.return = data.frame()
for (i in 1:length(symbol)){
# extract closing prices only
opening = getSymbols(symbol[i], auto.assign = F,
from = "2018-01-01", to = "2019-01-01",
getSymbols.yahoo.warning = FALSE)[,1]
closing = closing_prices[,i]
# stock_volume = getSymbols(symbol[i], auto.assign = F,
# from = "2018-01-01", to = "2019-01-01",
# getSymbols.yahoo.warning = FALSE)[,5]
# return = (closing - opening) * stock_volume
return = closing - opening
colnames(return) = paste(symbol[i], "return", collapse = " ")
stock.return = cbind(stock.return, return)
}
return = as.data.frame(stock.return)
dim(return)
View(return)
par(mfrow = c(1,2))
plot(pvar.scale,xlab="Principal component", main = "Scree Plot",
ylab="Prop. of variance explained", ylim=c(0,1), type='o')
plot(cvar.scale,xlab="Principal component", main = "Scree Plot",
ylab="Cumulative Prop. of variance explained", ylim=c(0,1), type='o')
par(mfrow = c(1,2))
plot(pvar,xlab="Principal component", main = "Scree Plot",
ylab="Prop. of variance explained", ylim=c(0,1), type='o')
plot(cvar,xlab="Principal component", main = "Scree Plot",
ylab="Cumulative Prop. of variance explained", ylim=c(0,1), type='o')
biplot(PC, cex = 0.8)
PC.return = princomp(return, cor = T)
par(mfrow = c(1,1))
biplot(PC.return, cex = 0.8)
biplot(PC.scale, cex = 0.8)
pvar.return = PC.return$sdev^2/sum(PC.return$sdev^2)   # Single proportion of var explained
cvar.return = cumsum(pvar.return)               # Cumulative proportion of var explained
par(mfrow = c(1,2))
plot(pvar.return,xlab="Principal component", main = "Scree Plot",
ylab="Prop. of variance explained", ylim=c(0,1), type='o')
plot(cvar.return,xlab="Principal component", main = "Scree Plot",
ylab="Cumulative Prop. of variance explained", ylim=c(0,1), type='o')
biplot(PC.return, cex = 0.8)
par(mfrow = c(1,2))
plot(pvar.return,xlab="Principal component", main = "Scree Plot",
ylab="Prop. of variance explained", ylim=c(0,1), type='o')
plot(cvar.return,xlab="Principal component", main = "Scree Plot",
ylab="Cumulative Prop. of variance explained", ylim=c(0,1), type='o')
taxicount_byhour_id<-bind_rows(taxi2015count_byhour_id, taxi2016count_byhour_id[,-2])
library(rgeos)
library(sp)
library(rgdal)
library(leaflet)
library(htmlwidgets)
library(shiny)
library(ggplot2)
library(dplyr)
library(data.table)
#read the uber data
#ubercount_byhour_id<-fread("~/Columbia University/cu_semester2/Applied Data Science/project2/ubercount_byhour_id.csv")
taxi2016count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PickUp2016_Clean.csv")
taxi2015count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PickUp2015_Clean.csv")
taxicount_byhour_id<-bind_rows(taxi2015count_byhour_id, taxi2016count_byhour_id[,-2])
View
View(taxicount_byhour_id)
taxicount_byhour_id$groups_byhour[1:3]
library(rgeos)
library(sp)
library(rgdal)
library(leaflet)
library(htmlwidgets)
library(shiny)
library(ggplot2)
library(dplyr)
library(data.table)
#read the uber data
#ubercount_byhour_id<-fread("~/Columbia University/cu_semester2/Applied Data Science/project2/ubercount_byhour_id.csv")
taxi2016count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PickUp2016_Clean.csv")
taxi2015count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PickUp2015_Clean.csv")
taxicount_byhour_id<-bind_rows(taxi2015count_byhour_id, taxi2016count_byhour_id[,-2])
paste(22,":00:00", sep = "")
shinyServer(function(input, output, session) {
#get input from ui and select the data we need
#we have three inputs here(car,time,date)
drawvalue <- reactive({
#match time and date to our data
date_time<-paste(input$date, paste(input$time,":00:00", sep = ""), sep = " ")
if (input$car == '2015'){
t <- filter(taxi2015count_byhour_id, groups_byhour==date_time)
return(t)
}
elif(input$car == '2016'){
t <- filter(taxi2016count_byhour_id, groups_byhour==date_time)
return(t)
}
else{t <- filter(taxicount_byhour_id, groups_byhour==date_time)}
return(t)
})
#draw output by leaflet
output$map<-renderLeaflet({
if (input=="2015"){
map<-leaflet(drawvalue)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,popup=taxi2015count_byhour_id$Count_byhour ,weight = 5,radius = ~Count_byhour^(1/4)*200,color = "black",stroke = TRUE,fillOpacity = 0.5)
}
elif(input=="2016"){
map<-leaflet(drawvalue)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,popup = taxi2016count_byhour_id$Count_byhour ,weight = 5,radius = ~Count_byhour^(1/4)*200,color = "yellow",stroke = TRUE,fillOpacity = 1)
}
else{}
})
})
navbarPage("NYC TRAFFIC", id="nav",
tabPanel("Time Flow Map",
div(class="outer",
tags$head(
# Include our custom CSS
includeCSS("app/styles.css"),
includeScript("app/gomap.js")
),
leafletOutput("map", width="100%", height="100%"),
h2("Taxi and Uber hourly flow change"),
selectInput("car","car type",c("Taxi","Uber","Both"),selected = "Taxi"),
textInput("date", "Choose date", "2015-1-8"),
sliderInput("time", "Hours of Day:",
min = 0, max = 24, value = 0, step = 1,
animate=animationOptions(interval = 500)),
helpText("Click play button to see dynamic flow data")
)
)
)
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/app)
navbarPage("NYC TRAFFIC", id="nav",
tabPanel("Time Flow Map",
div(class="outer",
tags$head(
# Include our custom CSS
includeCSS("app/styles.css"),
includeScript("app/gomap.js")
),
leafletOutput("map", width="100%", height="100%"),
h2("Taxi and Uber hourly flow change"),
selectInput("car","car type",c("Taxi","Uber","Both"),selected = "Taxi"),
textInput("date", "Choose date", "2015-1-8"),
sliderInput("time", "Hours of Day:",
min = 0, max = 24, value = 0, step = 1,
animate=animationOptions(interval = 500)),
helpText("Click play button to see dynamic flow data")
)
)
)
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/app")
navbarPage("NYC TRAFFIC", id="nav",
tabPanel("Time Flow Map",
div(class="outer",
tags$head(
# Include our custom CSS
includeCSS("app/styles.css"),
includeScript("app/gomap.js")
),
leafletOutput("map", width="100%", height="100%"),
h2("Taxi and Uber hourly flow change"),
selectInput("car","car type",c("Taxi","Uber","Both"),selected = "Taxi"),
textInput("date", "Choose date", "2015-1-8"),
sliderInput("time", "Hours of Day:",
min = 0, max = 24, value = 0, step = 1,
animate=animationOptions(interval = 500)),
helpText("Click play button to see dynamic flow data")
)
)
)
function (title, ..., id = NULL, selected = NULL, position = c("static-top",
"fixed-top", "fixed-bottom"), header = NULL, footer = NULL,
inverse = FALSE, collapsible = FALSE, collapsable, fluid = TRUE,
responsive = NULL, theme = NULL, windowTitle = title)
''
navbarPage("NYC TRAFFIC", id="nav",
tabPanel("Time Flow Map",
div(class="outer",
tags$head(
# Include our custom CSS
includeCSS("styles.css"),
includeScript("gomap.js")
),
leafletOutput("map", width="100%", height="100%"),
h2("Taxi and Uber hourly flow change"),
selectInput("car","car type",c("Taxi","Uber","Both"),selected = "Taxi"),
textInput("date", "Choose date", "2015-1-8"),
sliderInput("time", "Hours of Day:",
min = 0, max = 24, value = 0, step = 1,
animate=animationOptions(interval = 500)),
helpText("Click play button to see dynamic flow data")
)
)
)
shinyServer(function(input, output, session) {
#get input from ui and select the data we need
#we have three inputs here(car,time,date)
drawvalue <- reactive({
#match time and date to our data
date_time<-paste(input$date, paste(input$time,":00:00", sep = ""), sep = " ")
if (input$car == '2015'){
t <- filter(taxi2015count_byhour_id, groups_byhour==date_time)
return(t)
}
elif(input$car == '2016'){
t <- filter(taxi2016count_byhour_id, groups_byhour==date_time)
return(t)
}
else{t <- filter(taxicount_byhour_id, groups_byhour==date_time)}
return(t)
})
#draw output by leaflet
output$map<-renderLeaflet({
if (input=="2015"){
map<-leaflet(drawvalue)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,popup=taxi2015count_byhour_id$Count_byhour,
weight = 5,radius = ~Count_byhour^(1/4)*200,color = "black",stroke = TRUE,fillOpacity = 0.5)}
else if (input=="2016"){
map<-leaflet(drawvalue)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,popup = taxi2016count_byhour_id$Count_byhour,
weight = 5,radius = ~Count_byhour^(1/4)*200,color = "yellow",stroke = TRUE,fillOpacity = 1)}
else{}
})
})
shinyServer(function(input, output, session) {
#get input from ui and select the data we need
#we have three inputs here(car,time,date)
drawvalue <- reactive({
#match time and date to our data
date_time<-paste(input$date, paste(input$time,":00:00", sep = ""), sep = " ")
if (input$car == '2015'){
t <- filter(taxi2015count_byhour_id, groups_byhour==date_time)
return(t)
}
elif(input$car == '2016'){
t <- filter(taxi2016count_byhour_id, groups_byhour==date_time)
return(t)
}
else{t <- filter(taxicount_byhour_id, groups_byhour==date_time)}
return(t)
})
#draw output by leaflet
output$map<-renderLeaflet({
if (input=="2015"){
map<-leaflet(drawvalue)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,popup=taxi2015count_byhour_id$Count_byhour,
weight = 5,radius = ~Count_byhour^(1/4)*200,color = "black",stroke = TRUE,fillOpacity = 0.5)}
else if (input=="2016"){
map<-leaflet(drawvalue)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,popup = taxi2016count_byhour_id$Count_byhour,
weight = 5,radius = ~Count_byhour^(1/4)*200,color = "yellow",stroke = TRUE,fillOpacity = 1)}
else{}
})
})
shinyServer(function(input, output, session) {
#get input from ui and select the data we need
#we have three inputs here(car,time,date)
drawvalue <- reactive({
#match time and date to our data
date.time <- paste(input$date, paste(input$time,":00:00", sep = ""), sep = " ")
if (input$car == '2015'){
t <- filter(taxi2015count_byhour_id, groups_byhour==date.time)
return(t)
}
else if (input$car == '2016'){
t <- filter(taxi2016count_byhour_id, groups_byhour==date.time)
return(t)
}
else{t <- filter(taxicount_byhour_id, groups_byhour==date.time)}
return(t)
})
#draw output by leaflet
output$map<-renderLeaflet({
if (input=="2015"){
map<-leaflet(drawvalue)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,popup=taxi2015count_byhour_id$Count_byhour,
weight = 5,radius = ~Count_byhour^(1/4)*200,color = "black",stroke = TRUE,fillOpacity = 0.5)}
else if (input=="2016"){
map<-leaflet(drawvalue)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,popup = taxi2016count_byhour_id$Count_byhour,
weight = 5,radius = ~Count_byhour^(1/4)*200,color = "yellow",stroke = TRUE,fillOpacity = 1)}
else{}
})
})
navbarPage("NYC TRAFFIC", id="nav",
tabPanel("Time Flow Map",
div(class="outer",
tags$head(
# Include our custom CSS
includeCSS("styles.css"),
includeScript("gomap.js")
),
leafletOutput("map", width="100%", height="100%"),
h2("Taxi and Uber hourly flow change"),
selectInput("car","car type",c("Taxi","Uber","Both"),selected = "Taxi"),
textInput("date", "Choose date", "2015-1-8"),
sliderInput("time", "Hours of Day:",
min = 0, max = 24, value = 0, step = 1,
animate=animationOptions(interval = 500)),
helpText("Click play button to see dynamic flow data")
)
)
)
runApp('~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/TAYLOR'APP')
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/myapp")
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/myapp")
navbarPage("NYC TRAFFIC", id="nav",
tabPanel("Time Flow Map",
div(class="outer",
tags$head(
# Include our custom CSS
includeCSS("styles.css"),
includeScript("gomap.js")
),
leafletOutput("map", width="100%", height="100%"),
h2("Taxi and Uber hourly flow change"),
selectInput("car","car type",c("Taxi","Uber","Both"),selected = "Taxi"),
textInput("date", "Choose date", "2015-1-8"),
sliderInput("time", "Hours of Day:",
min = 0, max = 24, value = 0, step = 1,
animate=animationOptions(interval = 500)),
helpText("Click play button to see dynamic flow data")
)
)
)
library(rgeos)
library(sp)
library(rgdal)
library(leaflet)
library(htmlwidgets)
library(shiny)
library(ggplot2)
library(dplyr)
library(data.table)
#read the uber data
#ubercount_byhour_id<-fread("~/Columbia University/cu_semester2/Applied Data Science/project2/ubercount_byhour_id.csv")
taxi2016count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PickUp2016_Clean.csv")
taxi2015count_byhour_id<-fread("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/output/PickUp2015_Clean.csv")
taxicount_byhour_id<-bind_rows(taxi2015count_byhour_id, taxi2016count_byhour_id[,-2])
shinyServer(function(input, output, session) {
#get input from ui and select the data we need
#we have three inputs here(car,time,date)
drawvalue <- reactive({
#match time and date to our data
date.time <- paste(input$date, paste(input$time,":00:00", sep = ""), sep = " ")
if (input$car == '2015'){
t <- filter(taxi2015count_byhour_id, groups_byhour==date.time)
return(t)
}
else if (input$car == '2016'){
t <- filter(taxi2016count_byhour_id, groups_byhour==date.time)
return(t)
}
else{t <- filter(taxicount_byhour_id, groups_byhour==date.time)}
return(t)
})
#draw output by leaflet
output$map<-renderLeaflet({
if (input=="2015"){
map<-leaflet(drawvalue)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,popup=taxi2015count_byhour_id$Count_byhour,
weight = 5,radius = ~Count_byhour^(1/4)*200,color = "black",stroke = TRUE,fillOpacity = 0.5)}
else if (input=="2016"){
map<-leaflet(drawvalue)%>% addTiles() %>%
setView(-73.86, 40.72, zoom=10)%>%
addProviderTiles("Stamen.Watercolor") %>%
addCircles(lng=~mean_long,lat=~mean_lat,popup = taxi2016count_byhour_id$Count_byhour,
weight = 5,radius = ~Count_byhour^(1/4)*200,color = "yellow",stroke = TRUE,fillOpacity = 1)}
else{}
})
})
runApp()
