absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = F, top = 60, left = "auto", right = 0, bottom = "auto",
width = 160, height = 180,
radioButtons("CF", label = "Layers",
choices = list("Count Number" = "count", "Fare Per Distance" = "FPD","Cluster" = "cluster1" ,"Cash Paying Percentage" = "cash"),
selected = "count")
),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 0, right = "auto", bottom = "auto",
width = 330, height = "auto",
h3("Panel"),
selectInput("days", "Days", c("All Day", "Business Day", "Not Business Day"),selected = "All Day"),
checkboxInput(inputId = "showhr",
label = strong("Show hours"),
value = FALSE),
conditionalPanel(condition = "input.showhr == false"
),
conditionalPanel(condition = "input.showhr == true",
sliderInput(inputId = "hr_adjust",
label = "Choose the time of the day:",
min = 0, max = 23, value = NULL, step = 1)
),
checkboxInput("top15count", "Top 5 Count", FALSE),
checkboxInput("top15FPD", "Top 5 FPD", FALSE),
checkboxInput(inputId = "showbr",
label = strong("Show Borough for Top 5 counts/FPD"),
value = FALSE),
conditionalPanel(condition = "input.showbr == true",
selectInput("boroSelect", "Borough for Top 5 counts/FPD",
c("Manhattan", "Bronx", "Brooklyn", "Queens", "Staten Island", "All"),
selected = "All")
),
radioButtons("subway", label = h4("Subway Station : "),
choices = list("Do not appear" = 1, "Show all stations" = 2, "Show unique station" = 3),
selected = 1),
plotOutput("districttimeplot", height = 280),
helpText(   a("Analysis",
href="https://github.com/TZstatsADS/Spr2017-proj2-grp2/blob/master/doc/analysis.html")
)
)
# absolutePanel(id="graphstuff",class = "panel panel-default", fixed=TRUE,
#               draggable = TRUE, top=55, left="auto", right= 5, bottom="auto",width=300,
#               height=100, style="opacity:0.65",
#
#
#               h4("hourly flow change", align = "center"),
#               plotOutput("districttimeplot",height = 200))
)
),
tabPanel("Dynamic Map",
div(class="outer",
tags$head(
# Include our custom CSS
includeCSS("styles.css"),
includeScript("gomap.js")
),
leafletOutput("map2", width="100%", height="100%"),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 20, right = "auto", bottom = "auto",
width = 330, height = "auto",
h2("Dynamic map of NYC taxi hourly flow change"),
selectInput("pd", "pick up or drop off", c("Pick up", "Drop off", "All"), selected = "Pick up"),
textInput("choose date", "Choose date", "1/1/2015"),
sliderInput("hours", "Hours of Day:",
min = 0, max = 23, value = 0, step = 1,
animate=animationOptions(interval = 500)),
helpText("Click play button to see dynamic flow data")
)
)
),
tabPanel("Raw Data",
hr(),
DT::dataTableOutput("rawtable")
)
)
navbarPage("NYC TAXI", id="nav",
#title = 'taxi menu',
tabPanel("Interactive Map",
div(class="outer",
tags$head(
# Include our custom CSS
includeCSS("app/styles.css"),
includeScript("app/gomap.js")
),
leafletOutput("map", width="100%", height="100%"),
# Shiny versions prior to 0.11 should use class="modal" instead.
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = F, top = 60, left = "auto", right = 0, bottom = "auto",
width = 160, height = 180,
radioButtons("CF", label = "Layers",
choices = list("Count Number" = "count", "Fare Per Distance" = "FPD","Cluster" = "cluster1" ,"Cash Paying Percentage" = "cash"),
selected = "count")
),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 0, right = "auto", bottom = "auto",
width = 330, height = "auto",
h3("Panel"),
selectInput("days", "Days", c("All Day", "Business Day", "Not Business Day"),selected = "All Day"),
checkboxInput(inputId = "showhr",
label = strong("Show hours"),
value = FALSE),
conditionalPanel(condition = "input.showhr == false"
),
conditionalPanel(condition = "input.showhr == true",
sliderInput(inputId = "hr_adjust",
label = "Choose the time of the day:",
min = 0, max = 23, value = NULL, step = 1)
),
checkboxInput("top15count", "Top 5 Count", FALSE),
checkboxInput("top15FPD", "Top 5 FPD", FALSE),
checkboxInput(inputId = "showbr",
label = strong("Show Borough for Top 5 counts/FPD"),
value = FALSE),
conditionalPanel(condition = "input.showbr == true",
selectInput("boroSelect", "Borough for Top 5 counts/FPD",
c("Manhattan", "Bronx", "Brooklyn", "Queens", "Staten Island", "All"),
selected = "All")
),
radioButtons("subway", label = h4("Subway Station : "),
choices = list("Do not appear" = 1, "Show all stations" = 2, "Show unique station" = 3),
selected = 1),
plotOutput("districttimeplot", height = 280),
helpText(   a("Analysis",
href="https://github.com/TZstatsADS/Spr2017-proj2-grp2/blob/master/doc/analysis.html")
)
)
# absolutePanel(id="graphstuff",class = "panel panel-default", fixed=TRUE,
#               draggable = TRUE, top=55, left="auto", right= 5, bottom="auto",width=300,
#               height=100, style="opacity:0.65",
#
#
#               h4("hourly flow change", align = "center"),
#               plotOutput("districttimeplot",height = 200))
)
),
tabPanel("Dynamic Map",
div(class="outer",
tags$head(
# Include our custom CSS
includeCSS("styles.css"),
includeScript("gomap.js")
),
leafletOutput("map2", width="100%", height="100%"),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 20, right = "auto", bottom = "auto",
width = 330, height = "auto",
h2("Dynamic map of NYC taxi hourly flow change"),
selectInput("pd", "pick up or drop off", c("Pick up", "Drop off", "All"), selected = "Pick up"),
textInput("choose date", "Choose date", "1/1/2015"),
sliderInput("hours", "Hours of Day:",
min = 0, max = 23, value = 0, step = 1,
animate=animationOptions(interval = 500)),
helpText("Click play button to see dynamic flow data")
)
)
),
tabPanel("Raw Data",
hr(),
DT::dataTableOutput("rawtable")
)
)
navbarPage("NYC TAXI", id="nav",
#title = 'taxi menu',
tabPanel("Interactive Map",
div(class="outer",
tags$head(
# Include our custom CSS
includeCSS("app/styles.css"),
includeScript("app/gomap.js")
),
leafletOutput("map", width="100%", height="100%"),
# Shiny versions prior to 0.11 should use class="modal" instead.
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = F, top = 60, left = "auto", right = 0, bottom = "auto",
width = 160, height = 180,
radioButtons("CF", label = "Layers",
choices = list("Count Number" = "count", "Fare Per Distance" = "FPD","Cluster" = "cluster1" ,"Cash Paying Percentage" = "cash"),
selected = "count")
),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 0, right = "auto", bottom = "auto",
width = 330, height = "auto",
h3("Panel"),
selectInput("days", "Days", c("All Day", "Business Day", "Not Business Day"),selected = "All Day"),
checkboxInput(inputId = "showhr",
label = strong("Show hours"),
value = FALSE),
conditionalPanel(condition = "input.showhr == false"
),
conditionalPanel(condition = "input.showhr == true",
sliderInput(inputId = "hr_adjust",
label = "Choose the time of the day:",
min = 0, max = 23, value = NULL, step = 1)
),
checkboxInput("top15count", "Top 5 Count", FALSE),
checkboxInput("top15FPD", "Top 5 FPD", FALSE),
checkboxInput(inputId = "showbr",
label = strong("Show Borough for Top 5 counts/FPD"),
value = FALSE),
conditionalPanel(condition = "input.showbr == true",
selectInput("boroSelect", "Borough for Top 5 counts/FPD",
c("Manhattan", "Bronx", "Brooklyn", "Queens", "Staten Island", "All"),
selected = "All")
),
radioButtons("subway", label = h4("Subway Station : "),
choices = list("Do not appear" = 1, "Show all stations" = 2, "Show unique station" = 3),
selected = 1),
plotOutput("districttimeplot", height = 280),
helpText(   a("Analysis",
href="https://github.com/TZstatsADS/Spr2017-proj2-grp2/blob/master/doc/analysis.html")
)
)
# absolutePanel(id="graphstuff",class = "panel panel-default", fixed=TRUE,
#               draggable = TRUE, top=55, left="auto", right= 5, bottom="auto",width=300,
#               height=100, style="opacity:0.65",
#
#
#               h4("hourly flow change", align = "center"),
#               plotOutput("districttimeplot",height = 200))
)
),
tabPanel("Dynamic Map",
div(class="outer",
tags$head(
# Include our custom CSS
includeCSS("app/styles.css"),
includeScript("app/gomap.js")
),
leafletOutput("map2", width="100%", height="100%"),
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = 20, right = "auto", bottom = "auto",
width = 330, height = "auto",
h2("Dynamic map of NYC taxi hourly flow change"),
selectInput("pd", "pick up or drop off", c("Pick up", "Drop off", "All"), selected = "Pick up"),
textInput("choose date", "Choose date", "1/1/2015"),
sliderInput("hours", "Hours of Day:",
min = 0, max = 23, value = 0, step = 1,
animate=animationOptions(interval = 500)),
helpText("Click play button to see dynamic flow data")
)
)
),
tabPanel("Raw Data",
hr(),
DT::dataTableOutput("rawtable")
)
)
runApp('app')
runApp('app')
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/data")
taxi2016 = fread("../data/taxi trip/taxi 2016.csv")
names(taxi2016)
location = read.csv("../output/taxi2016_locatoin.csv")
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11")
location = read.csv("../output/taxi2016_locatoin.csv")
location = read.csv("../output/taxi2016_location.csv")
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11")
location = read.csv("../output/taxi2016_location.csv")
location = read_csv("../output/taxi2016_location.csv")
library(data.table)
library(tibble)
library(dplyr)
library(bit64)
library(tidyverse)
location = read_csv("../output/taxi2016_location.csv")
setwd("~/Desktop/GR5243 Applied Data Science/Project 2/Spring2019-Proj2-grp11/data")
taxi2016 = fread("../data/taxi trip/taxi 2016.csv")
location = read_csv("../output/taxi2016_location.csv")
View(location)
library("ggmap")
mykey = "AIzaSyDj6W8F2IcxkcEnW-aKGmcJovBpMAhIAt4"
register_google(key = mykey)
#### Read in data
taxi2016 = fread("../data/taxi trip/taxi 2016.csv")
taxi_zone = fread("../data/taxi trip/taxi_zone_lookup.csv")
colnames(taxi_zone)[1] = "PULocationID"
taxi16 = inner_join(taxi2016, taxi_zone[,c(1,3)], by = "PULocationID")
names(taxi16)
colnames(taxi16)[8] = "PUzone"
colnames(taxi_zone)[1] = "DOLocationID"
taxi16 = inner_join(taxi16, taxi_zone[,c(1,3)], by = "DOLocationID")
colnames(taxi16)[9] = "DOzone"
taxi_2016 = taxi16[,-c(6,7)]
pu = as.character(taxi_2016$tpep_pickup_datetime)
do = as.character(taxi_2016$tpep_dropoff_datetime)
date.express = "[0-9]{2}/[0-9]{2}/[0-9]{4}"
pu.date = unlist(regmatches(pu, gregexpr(pu, pattern = date.express)))
do.date = unlist(regmatches(do, gregexpr(do, pattern = date.express)))
taxi_2016[,1] = pu.date
taxi_2016[,2] = do.date
colnames(taxi_2016)[1] = "PUdate"
colnames(taxi_2016)[2] = "DOdate"
colnames(taxi_zone)[1] = "PULocationID"
taxi16 = inner_join(taxi2016, taxi_zone[,c(1,3)], by = "PULocationID")
names(taxi16)
colnames(taxi16)[8] = "PUzone"
colnames(taxi_zone)[1] = "DOLocationID"
taxi16 = inner_join(taxi16, taxi_zone[,c(1,3)], by = "DOLocationID")
colnames(taxi16)[9] = "DOzone"
taxi_2016 = taxi16[,-c(6,7)]
pu = as.character(taxi_2016$tpep_pickup_datetime)
do = as.character(taxi_2016$tpep_dropoff_datetime)
View(taxi_2016)
# Extract hours
time.express = "[0-9]{2}:[0-9]{2}:[0-9]{2} [A-Z]{2}"
library(stringr)
pu.time = unlist(regmatches(pu, gregexpr(pu, pattern = time.express)))
do.time = unlist(regmatches(do, gregexpr(do, pattern = time.express)))
View(taxi_2016)
head(pu.time)
pu.hour = word(pu.time[10], 1,2, sep=":")
pu.hour
pu.hour = word(pu.time[1], 1,2, sep=":")
pu.hour
species_location<-c('Homo_sapiens_Lausanne_Switzerland', 'Solenopsis_invicta_California_US', 'Rattus_novaborensis_Copenhagen_Denmark', 'Candida_albicans_Crotch_Home')
word(species_location, 1,2, sep="_")
pu.hour = word(pu.time[1], 1,2)
pu.hour
pu.hour = word(pu.time[1], 1)
pu.hour = word(pu.time[1], 1)
pu.hour
pu.hour = word(pu.time[1], 1,2, sep = ";")
pu.hour = word(pu.time[1], 1,2, sep = ":")
pu.hour
pu.hour = word(pu.hour, 1,2, sep = ":")
pu.hour
install.packages("stringi")
library(stringi)
stri_extract_first_regex(pu.time[1:2], "[0-9]{2}")
pu.time[1:2]
pu.hour = stri_extract_first_regex(pu.time, "[0-9]{2}")
do.hour = stri_extract_first_regex(do.time, "[0-9]{2}")
head(do.time)
head(do.hour)
View(taxi_2016)
colnames(taxi16)[8] = "PU.zone"
colnames(taxi16)[9] = "DO.zone"
colnames(taxi16)[9] = "DO.zone"
taxi_2016 = taxi16[,-c(6,7)]
taxi_2016$PU.hour = pu.hour
taxi_2016$DO.hour = do.hour
# Extract date only
date.express = "[0-9]{2}/[0-9]{2}/[0-9]{4}"
pu.date = unlist(regmatches(pu, gregexpr(pu, pattern = date.express)))
# Update data
taxi_2016[,1] = pu.date
taxi_2016[,2] = do.date
colnames(taxi_2016)[1] = "PU.date"
colnames(taxi_2016)[2] = "DO.date"
write_csv(taxi_2016, path = "../output/taxi2016_TimeClean.csv")
library(data.table)
library(tibble)
library(dplyr)
library(bit64)
library(tidyverse)
write_csv(taxi_2016, path = "../output/taxi2016_TimeClean.csv")
# Count Pickup zones
count.pick = taxi_2016 %>%
group_by(`PUzone`) %>%
summarise(
value = n()
)
# Count Pickup zones
count.pick = taxi_2016 %>%
group_by(`PU.zone`) %>%
summarise(
value = n()
)
count.pick = count.pick[order(-count.pick$value),]
# Count Drop-off zones
count.drop = taxi_2016 %>%
group_by(`DO.zone`) %>%
summarise(
value = n()
)
count.drop = count.drop[order(-count.drop$value),]
# get geographical info:
pu.geo =count.pick %>%
mutate(Add = paste(`PU.zone`, "New York, NY", sep = ","))%>%
mutate_geocode(Add)
library("ggmap")
mykey = "AIzaSyDj6W8F2IcxkcEnW-aKGmcJovBpMAhIAt4"
register_google(key = mykey)
# get geographical info:
pu.geo =count.pick %>%
mutate(Add = paste(`PU.zone`, "New York, NY", sep = ","))%>%
mutate_geocode(Add)
View(count.drop)
do.geo =count.drop %>%
mutate(Add = paste(`DOzone`, "New York, NY", sep = ","))%>%
mutate_geocode(Add)
do.geo =count.drop %>%
mutate(Add = paste(`DO.zone`, "New York, NY", sep = ","))%>%
mutate_geocode(Add)
View(pu.geo)
taxi2016_count = data.frame(PU.count = pu.geo[,2:5], DO.count = do.geo[,2:5])
PU.count = pu.geo[,2:5]
DO.count = do.geo[,2:5]
write_csv(PU.count, path = "../output/taxi2016_PUcount.csv")
write_csv(DO.count, path = "../output/taxi2016_DOcount.csv")
taxi.geo = inner_join(taxi_2016, pu.geo[,c(1,4,5)], by = "PU.zone")  # pickup
colnames(taxi.geo)[8] = "PU.lon"
colnames(taxi.geo)[9] = "PU.lat"
taxi.geo = inner_join(taxi.geo, do.geo[,c(1,4,5)], by = "DO.zone")  # drop-off
colnames(taxi.geo)[10] = "DO.lon"
colnames(taxi.geo)[11] = "DO.lat"
View(taxi.geo)
colnames(taxi.geo)[8] = "PU.hour"
colnames(taxi.geo)[9] = "DO.hour"
colnames(taxi.geo)[10] = "PU.lon"
colnames(taxi.geo)[11] = "DO.lat"
colnames(taxi.geo)[12] = "DO.lon"
colnames(taxi.geo)[13] = "DO.lat"
colnames(taxi.geo)[11] = "PU.lat"
#
# Delete useless info
taxi2016_clean = taxi.geo[,-c(6,7)]
View(taxi2016_clean)
write_csv(taxi2016_clean[,-c(3,4,5)], path = "../output/taxi2016_DateTimeLocation.csv")
write_csv(taxi2016_clean, path = "../output/taxi2016_DateTimeLocation.csv")
#### Read in data
taxi2016 = fread("../data/taxi trip/taxi 2016.csv")
taxi_zone = fread("../data/taxi trip/taxi_zone_lookup.csv")
names(taxi2016)
dim(taxi2016)
dim(taxi2016_clean)
#### Match pickup and drop-off zones
colnames(taxi_zone)[1] = "PULocationID"
taxi16 = inner_join(taxi2016, taxi_zone[,c(1,3)], by = "PULocationID")
colnames(taxi16)[8] = "PU.zone"
colnames(taxi_zone)[1] = "DOLocationID"
taxi16 = inner_join(taxi16, taxi_zone[,c(1,3)], by = "DOLocationID")
colnames(taxi16)[9] = "DO.zone"
### Delete useless info
View(taxi16)
#### Read in data
taxi2016 = fread("../data/taxi trip/taxi 2016.csv")
#### Match pickup and drop-off zones
colnames(taxi_zone)[1] = "PULocationID"
taxi16 = inner_join(taxi2016, taxi_zone[,c(1,3)], by = "PULocationID")
colnames(taxi16)[8] = "PU.zone"
colnames(taxi_zone)[1] = "DOLocationID"
taxi16 = inner_join(taxi16, taxi_zone[,c(1,3)], by = "DOLocationID")
colnames(taxi16)[9] = "DO.zone"
colnames(taxi16)[9] = "PU.zone"
colnames(taxi16)[10] = "DO.zone"
#### Read in data
taxi2016 = fread("../data/taxi trip/taxi 2016.csv")
taxi_zone = fread("../data/taxi trip/taxi_zone_lookup.csv")
#### Match pickup and drop-off zones
colnames(taxi_zone)[1] = "PULocationID"
taxi16 = inner_join(taxi2016, taxi_zone[,c(1,3)], by = "PULocationID")
colnames(taxi16)[9] = "PU.zone"
colnames(taxi_zone)[1] = "DOLocationID"
colnames(taxi16)[10] = "DO.zone"
taxi16 = inner_join(taxi16, taxi_zone[,c(1,3)], by = "DOLocationID")
colnames(taxi16)[10] = "DO.zone"
taxi_2016 = taxi16[,-c(6,7)]
# Update data
taxi_2016$PU.hour = pu.hour
taxi_2016$DO.hour = do.hour
# Update data
taxi_2016[,1] = pu.date
taxi_2016[,2] = do.date
colnames(taxi_2016)[1] = "PU.date"
colnames(taxi_2016)[2] = "DO.date"
View(taxi_2016)
write_csv(taxi_2016[,-5], path = "../output/taxi2016_TimeClean.csv")
taxi.geo = inner_join(taxi_2016, pu.geo[,c(1,4,5)], by = "PU.zone")  # pickup
#### Read in data
taxi2016 = fread("../data/taxi trip/taxi 2016.csv")
taxi16 = inner_join(taxi2016, taxi_zone[,c(1,3)], by = "PULocationID")
taxi_2016 = fread("../output/taxi2016_TimeClean.csv")
# Count Pickup zones
count.pick = taxi_2016 %>%
group_by(`PU.zone`) %>%
summarise(
value = n()
)
count.pick = count.pick[order(-count.pick$value),]
# Count Drop-off zones
count.drop = taxi_2016 %>%
group_by(`DO.zone`) %>%
summarise(
value = n()
)
count.drop = count.drop[order(-count.drop$value),]
View(pu.geo)
taxi.geo = inner_join(taxi_2016, pu.geo[,c(1,4,5)], by = "PU.zone")  # pickup
colnames(taxi.geo)[11] = "PU.lon"
View(taxi.geo)
colnames(taxi.geo)[10] = "PU.lon"
colnames(taxi.geo)[11] = "PU.lat"
taxi.geo = inner_join(taxi.geo, do.geo[,c(1,4,5)], by = "DO.zone")  # drop-off
colnames(taxi.geo)[12] = "DO.lon"
colnames(taxi.geo)[13] = "DO.lat"
View(taxi.geo)
# Delete useless info
taxi2016_clean = taxi.geo[,-c(6,7)]
View(taxi2016_clean)
write_csv(taxi2016_clean, path = "../output/taxi2016_DateTimeLocation.csv")
View(taxi2016_clean)
View(taxi.geo)
write_csv(taxi2016_clean[,-c(3,4,5)], path = "../output/taxi2016_DateTimeLocation.csv")
write_csv(taxi2016_clean, path = "../output/taxi2016_DateTimeLocation.csv")
View(taxi2016_clean)
View(taxi.geo)
# Delete useless info
#taxi2016_clean = taxi.geo[,-c(6,7)]
#View(taxi2016_clean)
#write_csv(taxi2016_clean, path = "../output/taxi2016_Clean.csv")
write_csv(taxi.geo, path = "../output/taxi2016_Clean.csv")
